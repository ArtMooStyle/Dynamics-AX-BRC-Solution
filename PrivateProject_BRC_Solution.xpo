Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: JOB

; Microsoft Dynamics AX Job: BCS_Test_SaveInfolog выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCS_Test_SaveInfolog
    #static void BCS_Test_SaveInfolog(Args _args)
    #{
    #    InventBarcodeReaderWSInterfaceLog   inventBarcodeReaderWSInterfaceLog;
    #    ;
    #
    #    while select inventBarcodeReaderWSInterfaceLog
    #        order by CreatedDateTime desc
    #    {
    #        if (inventBarcodeReaderWSInterfaceLog.InfologData != conNull())
    #        {
    #            info(strFmt("%1", inventBarcodeReaderWSInterfaceLog.RecId));
    #            break;
    #        }
    #    }
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BcsBase64 выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BcsBase64
    #// <_0259_BCS_2015> 3.11.2015 RN
    #static void BcsBase64(Args _args)
    #{
    #    str                     strBase64;
    #    str                     s;
    #    System.Byte[]           byteArr;
    #    System.Text.Encoding    utf8;
    #    ;
    #
    #    strBase64   = "MDAwMQ==";
    #
    #    byteArr = System.Convert::FromBase64String(strBase64);
    #
    #    utf8 = System.Text.Encoding::get_UTF8();
    #    s = utf8.GetString(byteArr);
    #
    #    info(s);
    #
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BcsClearPrintLog выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BcsClearPrintLog
    #static void BcsClearPrintLog(Args _args)
    #{
    #    BcsPrintLog bcsPrintLog;
    #    ;
    #
    #    delete_from bcsPrintLog;
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestBarcodeCode128 выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestBarcodeCode128
    #static void BCSTestBarcodeCode128(Args _args)
    #{
    #    Barcode         barcode;
    #    str             value;
    #    BarCodeString   barCodeStr;
    #    ;
    #
    #    value   = "085956116000913602"; // palletId
    #
    #    //barcode = Barcode::construct(BarcodeType::Code128);
    #    barcode = Barcode::construct(BarcodeType::EAN128);
    #    barcode.string(true, value, BarcodeContentType::Pallet);
    #    barCodeStr  = barcode.barcodeStr();
    #
    #    info(strFmt("%1", barCodeStr));
    #
    #    // Code128
    #    // "%"*#&"+%!+!%'"")-!%&&-%%!'#&&%#'!')!1"
    #
    #    // EAN128
    #    // "%"*-!)%&&#&"+%!+!%'"")-!%&&-%%!'#&&%"!(')!1"
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestBlockPallet выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestBlockPallet
    #// <_DRY_0010_BCSInventCounting> 27.3.2014 RN
    #static void BCSTestBlockPallet(Args _args)
    #{
    #    container   inputParamCon;
    #    str         ret;
    #    UtcDateTime dateTime;
    #    str         dateTimeStr;
    #    ;
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #
    #    inputParamCon   = [
    #        21,
    #        "term1",
    #        dateTimeStr,
    #        "]C100085956116000659982",
    #        "prod def"];
    #
    #    ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestInventCountCreateLine выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestInventCountCreateLine
    #// <_0010_DRY_BCSInventCounting> 27.3.2014 RN
    #static void BCSTestInventCountCreateLine(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    inventLocationId;
    #    InventJournalId     journalId;
    #    ItemId              itemId;
    #    WmsPalletId         palletId;
    #    InventBatchId       batchId;
    #    WmsLocationId       wmsLocationId;
    #    Qty                 qty;
    #    // <_0257_BCSInventCounting>
    #    UnitId                              unitId;
    #    WMSPalletBlockingCodeID             palletBlockingCodeId;
    #    BcsInventCountingConfirmation       confirmation;
    #    // </_0257_BCSInventCounting>
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::InventCountLine;
    #    terminalId  = "term7";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "cs"; // "en-gb";
    #    pinCoded    = "NDI5Mg=="; // "0002"
    #
    #    // Function specific paramters
    #    // string PalletId, string BatchId, string WarehouseId, string LocationId, double Quantity);
    #    journalId               = "017898"; // TODO: Add journal
    #    itemId                  = "o20001";
    #    palletId                = "";       // TODO: Add pallet
    #    batchId                 = "";
    #    inventLocationId        = "MRO";
    #    wmsLocationId           = "01/2/C";    // TODO: Add location
    #    qty                     = 29;
    #    unitId                  = "pcs";
    #    palletBlockingCodeId    = "";
    #    //confirmation            = BcsInventCountingConfirmation::CheckConfirmation;
    #    confirmation            = BcsInventCountingConfirmation::Confirmed;
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded,
    #                   journalId,
    #                   itemId,
    #                   palletId,
    #                   batchId,
    #                   inventLocationId,
    #                   wmsLocationId,
    #                   qty,
    #                   unitId,
    #                   palletBlockingCodeId,
    #                   confirmation
    #                  ];
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestInventCountJournal выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestInventCountJournal
    #// <_0010_DRY_BCSInventCounting> 27.3.2014 RN
    #static void BCSTestInventCountJournal(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    inventLocationId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::InventCountJournal;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "cs"; // "en-gb";
    #    pinCoded    = "MDAwMQ=="; // "0001"
    #
    #    // Function specific paramters
    #    inventLocationId    = "RM";
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded,
    #                   inventLocationId
    #                  ];
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestInventPick выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestInventPick
    #// <_DRY_0010_BCSInventCounting> 27.3.2014 RN
    #static void BCSTestInventPick(Args _args)
    #{
    #    container   inputParamCon;
    #    str         ret;
    #    UtcDateTime dateTime;
    #    str         dateTimeStr;
    #    ;
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    // string TerminlId,
    #    // DateTime excecDateTime,
    #    // string PickingListId,
    #    // string InventTransId,
    #    // string ItemId,
    #    // string ConfigID,
    #    // string WarehouseId,
    #    // string LocationId,
    #    // string PalletId,
    #    // string BatchId,
    #    // double Quantity
    #
    #    // Test on picking list for sales order SO005165.
    #
    #    //085956116000647323,000535-00037639
    #
    #    // ,,,,,,IN,00083956,002529,120000
    #
    #    inputParamCon   = [
    #        41,             // InventBarcodeReaderInterfaceFunction::InventPick,   // function ID
    #        "term111",        // terminal ID
    #        dateTimeStr,
    #        "035900_116",   // PickingListId
    #        "",             // InventTransId
    #        "",             // ItemId
    #        "",             // config
    #        "",             // warehouse
    #        "OUT01",           // wms location//00325554//00312003//00312003//00325554
    #        "00312003", //"085956116000182602", //"085956116000438884",   // pallet
    #        //"%\"$-!)\")&\"*%!#'\"*%!)-%&&&&%!-)\"%*\"%*\"%*\"%*\"%*\"%*\"%*\"%*!)-%%'&#\"&#\"-!)'\"\"!&*'\"\"&!*&#\"!&*'\"\"&!*!-)\"%*))%#)%!)-%&&&\"#-\"\"!&$')!1",
    #        //"(01)A10002--------(30)1010(11)121119(10)121119-PO000986",
    #        //"(01)A10002(30)1010(11)121119(10)121119-PO000986",
    #        //"92A10002301010~f1112111910121119-PO000986",
    #        //"121119-PO000986",//"121119-PO000986",//"130306-PO001180",      // batch
    #        //"92A10002~f301010~f1112111910121119-PO000986",
    #        "", // batch
    #        0,  // qty
    #        "",
    #        0];             // unitId
    #
    #    ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestInventPickCrosscheck выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestInventPickCrosscheck
    #// <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
    #static void BCSTestInventPickCrosscheck(Args _args)
    #{
    #    container   inputParamCon;
    #    str         ret;
    #    UtcDateTime dateTime;
    #    str         dateTimeStr;
    #    ;
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    // string TerminlId,
    #    // DateTime excecDateTime,
    #    // string PickingListId,
    #    // string InventTransId,
    #    // string ItemId,
    #    // string ConfigID,
    #    // string WarehouseId,
    #    // string LocationId,
    #    // string PalletId,
    #    // string BatchId,
    #    // double Quantity
    #    // string UnitId
    #    // bool   AllowCrossCheck
    #
    #    inputParamCon   = [
    #        41,             // InventBarcodeReaderInterfaceFunction::InventPick,   // function ID
    #        "term2",        // terminal ID
    #        dateTimeStr,
    #        "001566",   // Production ID
    #        "",             // InventTransId
    #        "A10004",             // ItemId
    #        "",             // config
    #        "",             // warehouse
    #        "HBD1/pick",           // wms location
    #        "085956116001059323", // pallet
    #        "test1", // batch
    #        4,
    #        "kg", // unitId
    #        0];   // crosscheck confirmed
    #
    #    ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestInventPickPalletInfo выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestInventPickPalletInfo
    #// <_0000_DRY_BCS> 28.2.2016 RN
    #static void BCSTestInventPickPalletInfo(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::InventPickPalletInfo;
    #    terminalId  = "term11";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "en-gb"; // "cs";
    #    pinCoded    = "MTExMQ=="; // "1111"
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #
    #    // Function specific paramters
    #    functionCon += ["004221", // production order
    #                    "085956116002381904"]; // pallet ID
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestInventPickProd выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestInventPickProd
    #// <_DRY_0010_BCSInventCounting> 27.3.2014 RN
    #static void BCSTestInventPickProd(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::InventPick;
    #    terminalId  = "term11";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "en-gb"; // "cs";
    #    pinCoded    = "MTExMQ=="; // "1111"
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #
    #    // Function specific paramters
    #    functionCon += [
    #        "006095",               // production order
    #        "",                     // InventTransId
    #        "",                     // ItemId
    #        "",                     // config
    #        "",                     // warehouse
    #        "HBD4/pick",            // wms location
    #        "085956116003346469",   // pallet ID
    #        "",                     // batch ID
    #        0,                    // qty
    #        "",                   // unitId
    #        1,                      // cross check confirmed
    #        ""];             // production order - transfer to
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestInventPickSimple выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestInventPickSimple
    #// <_DRY_0010_BCSInventCounting> 27.3.2014 RN
    #static void BCSTestInventPickSimple(Args _args)
    #{
    #    container   inputParamCon;
    #    str         ret;
    #    UtcDateTime dateTime;
    #    str         dateTimeStr;
    #    ;
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    // string TerminlId,
    #    // DateTime excecDateTime,
    #    // string PickingListId,
    #    // string InventTransId,
    #    // string ItemId,
    #    // string ConfigID,
    #    // string WarehouseId,
    #    // string LocationId,
    #    // string PalletId,
    #    // string BatchId,
    #    // double Quantity
    #
    #    // Test on inventory picking for transfer order 020176_078.
    #
    #    inputParamCon   = [
    #        41,             // InventBarcodeReaderInterfaceFunction::InventPick,   // function ID
    #        "term11",        // terminal ID
    #        dateTimeStr,
    #        //"022369_116", // Test picking route
    #        // Order number (Transfer order, production order, sales order); this will force the function ID to be changed to 45!!!
    #        //"057444_078",   // transfer order
    #        //"SO004304",     // sales order
    #        "004222",       // production order
    #        "",             // InventTransId
    #        "",       // ItemId
    #        "",             // config
    #        "",             // warehouse
    #        "HBD3/pick",         // wms location
    #        "085956116002503412",     // pallet - pick entire pallet
    #        "",             // batch
    #        0,              // qty
    #        "kg"];         // unitId
    #
    #    ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestInventRegister выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestInventRegister
    #// <_DRY_0010_BCSInventCounting> 27.3.2014 RN
    #static void BCSTestInventRegister(Args _args)
    #{
    #    container   inputParamCon;
    #    str         ret;
    #    UtcDateTime dateTime;
    #    str         dateTimeStr;
    #    ;
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    inputParamCon   = [
    #        42, //InventBarcodeReaderInterfaceFunction::InventRegister,   // function ID
    #        "term2",      // terminal ID
    #        dateTimeStr,    //DateTimeUtil::utcNow(),
    #        "",             // InventTransType - transfer order receive
    #        "000030_078", //'007515_078',   // transfer order ID
    #        "203001",       // item
    #        "",             // config
    #        "",   // invent location
    #        "01",            // wms location
    #        "085956116000527397", //'00020717',     // pallet
    #        "020123456789123437100~f1113062710000298", //'004800',       // batch
    #        0];          // qty
    #
    #    ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestInventUnpick выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestInventUnpick
    #// <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
    #static void BCSTestInventUnpick(Args _args)
    #{
    #    container   inputParamCon;
    #    str         ret;
    #    UtcDateTime dateTime;
    #    str         dateTimeStr;
    #    ;
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    // string TerminlId,
    #    // DateTime excecDateTime,
    #    // string PickingListId,
    #    // string InventTransId,
    #    // string ItemId,
    #    // string ConfigID,
    #    // string WarehouseId,
    #    // string LocationId,
    #    // string PalletId,
    #    // string BatchId,
    #    // double Quantity
    #    // string UnitId
    #    // bool   AllowCrossCheck
    #
    #    inputParamCon   = [
    #        41,             // InventBarcodeReaderInterfaceFunction::InventPick,   // function ID
    #        "term2",        // terminal ID
    #        dateTimeStr,
    #        "004221",   // Production ID
    #        "",             // InventTransId
    #        "",             // ItemId
    #        "",             // config
    #        "",             // warehouse
    #        "HBD1/pick",           // wms location
    #        "085956116002381904", // pallet
    #        "", // batch
    #        -500,
    #        "kg", // unitId
    #        0];   // crosscheck confirmed
    #
    #    ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestIssueMatDefaultMROWarehouse выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestIssueMatDefaultMROWarehouse
    #// <_XXXX_DRY_BcsIssueMatForMRODefaultWh> 7.4.2015 RN
    #static void BCSTestIssueMatDefaultMROWarehouse(Args _args)
    #{
    #    container           inputParamCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    EmplId              emplId;
    #    UserId              userId;
    #    ItemId              itemId;
    #    InventLocationId    inventLocationId;
    #    WmsLocationId       wmsLocationId;
    #    str                 whLocId;
    #    SysDim              costCenter;
    #    ;
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    //string EmplId, string ItemId, string LocationId, string CostCenter, double Quantity);
    #    userId              = curUserId();
    #    emplId              = EmplTable::userId2EmplId(userId);
    #    itemId              = "O10005";
    #    inventLocationId    = "";
    #    wmsLocationId       = "01/3/A";
    #    costCenter          = "120481";
    #
    #    whLocId             = strFmt("%1/%2", inventLocationId, wmsLocationId);
    #
    #    inputParamCon   = [
    #        40,             //InventBarcodeReaderInterfaceFunction::InventConsumption // function ID
    #        'term2',        // terminal ID
    #        dateTimeStr,
    #        emplId,
    #        itemId,
    #        whLocId,
    #        costCenter,
    #        1]; // qty
    #
    #    ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestIssueMaterialForMaintenance выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestIssueMaterialForMaintenance
    #// <_DRY_0010_BCSInventCounting> 27.3.2014 RN
    #static void BCSTestIssueMaterialForMaintenance(Args _args)
    #{
    #    container           inputParamCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    EmplId              emplId;
    #    UserId              userId;
    #    ItemId              itemId;
    #    InventLocationId    inventLocationId;
    #    WmsLocationId       wmsLocationId;
    #    str                 whLocId;
    #    SysDim              costCenter;
    #    ;
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    //string EmplId, string ItemId, string LocationId, string CostCenter, double Quantity);
    #    userId              = curUserId();
    #    emplId              = EmplTable::userId2EmplId(userId);
    #    itemId              = "O10004";
    #    inventLocationId    = "MRO";
    #    wmsLocationId       = "01";
    #    costCenter          = "120481";
    #
    #    whLocId             = strFmt("%1/%2", inventLocationId, wmsLocationId);
    #
    #    inputParamCon   = [
    #        40,             //InventBarcodeReaderInterfaceFunction::InventConsumption // function ID
    #        'term2',        // terminal ID
    #        dateTimeStr,
    #        emplId,
    #        itemId,
    #        whLocId,
    #        costCenter,
    #        1]; // qty
    #
    #    ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestLogin выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestLogin
    #// <_0259_BCS_2015> 20.10.2015 RN
    #static void BCSTestLogin(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::LogAsUser;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "cs";
    #    pinCoded    = "MDAwMQ=="; // "0001"
    #
    #    functionCon   = [
    #        funcId,
    #        terminalId,     // terminal ID
    #        dateTimeStr,
    #        langId,         // Language
    #        pinCoded        // Employee PIN coded
    #        ];
    #
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestLogin11 выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestLogin11
    #// <_DRY_0071_PalletMoveBlocked> 23.4.2014 RN
    #static void BCSTestLogin11(Args _args)
    #{
    #    container   inputParamCon;
    #    str         ret;
    #    UtcDateTime dateTime;
    #    str         dateTimeStr;
    #    ;
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    inputParamCon   = [
    #        1, //InventBarcodeReaderInterfaceFunction::PalletMove,   // function ID
    #        "login"
    #        ];      // terminal ID
    #
    #
    #
    #    ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPalletBlockingBlock выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPalletBlockingBlock
    #// RN
    #static void BCSTestPalletBlockingBlock(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    WmsPalletId         palletId;
    #    WMSPalletBlockingCodeID palletBlockingCodeId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::BlockPallet;
    #    //funcId      = InventBarcodeReaderInterfaceFunction::UnBlockPallet;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "cs"; // "en-gb";
    #    pinCoded    = "MDAwMQ=="; // "0001"
    #
    #    // Function specific paramters
    #    palletId    = "085956116000794492";
    #    //palletBlockingCodeId = "prod def";
    #    palletBlockingCodeId = "prod ok";
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded,
    #                   palletId, // pallet
    #                   palletBlockingCodeId];
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPalletBlockingCodeList выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPalletBlockingCodeList
    #// <_0010_DRY_BCSInventCounting> 11.1.2016 RN
    #static void BCSTestPalletBlockingCodeList(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    inventLocationId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::BlockingCodeList;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "cs"; // "en-gb";
    #    pinCoded    = "MDAwMQ=="; // "0001"
    #
    #    // Function specific paramters
    #    inventLocationId    = "RM";
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPalletInfo выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPalletInfo
    #// <_0259_BCS_2015> 20.10.2015 RN
    #static void BCSTestPalletInfo(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::PalletInfo;
    #    terminalId  = "term11";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "en-gb"; // "cs";
    #    pinCoded    = "MTExMQ=="; // "1111"
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #
    #    // Function specific paramters
    #    functionCon += ["00085956116002738388"]; // pallet ID
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPalletInfoItem выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPalletInfoItem
    #// <_0350_BcsPalletInfoExt> 24.7.2016 PS
    #static void BCSTestPalletInfoItem(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    itemId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::PalletInfoItem;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "cs"; // "en-gb";
    #    pinCoded    = "MDAwMQ=="; // "0001"
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #
    #    // Function specific paramters
    #    itemId  = "224027";
    #    functionCon += [itemId];
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPalletInfoLocation выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPalletInfoLocation
    #// <_0350_BcsPalletInfoExt> 24.7.2016 PS
    #static void BCSTestPalletInfoLocation(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    inventLocationId;
    #    WmsLocationId       WmsLocationId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::PalletInfoLocation;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "cs"; // "en-gb";
    #    pinCoded    = "MDAwMQ=="; // "0001"
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #
    #    // Function specific paramters
    #    inventLocationId    = "FP";
    #    wmsLocationId       = "D35";
    #    functionCon += [inventLocationId,wmsLocationId];
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BcsTestPalletItemDim выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BcsTestPalletItemDim
    #// <_0261_BCSInventUnpick> 17.12.2015 RN
    #static void BcsTestPalletItemDim(Args _args)
    #{
    #    WmsPallet               wmsPallet;
    #    InventDimOnHandMember   InventDimOnHandMember;
    #    ;
    #
    #    wmsPallet = WmsPallet::find("085956116002125980");
    #    inventDimOnHandMember   = wmsPallet.itemDim();
    #
    #    if (inventDimOnHandMember)
    #    {
    #        info(inventDimOnHandMember.parmItemId());
    #    }
    #    else
    #    {
    #        info("There are multiple items on the pallet or no item at all.");
    #    }
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPalletLoadList выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPalletLoadList
    #// <_0341_BCSWmsShipmentLoadUnload> 18.7.2016 PS
    #static void BCSTestPalletLoadList(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    inventLocationId;
    #    WmsLocationId       WmsLocationId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::PalletLoadList;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "cs"; // "en-gb";
    #    pinCoded    = "MDAwMQ=="; // "0001"
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #
    #    // Function specific paramters
    #    inventLocationId    = "FP";
    #    wmsLocationId       = "G01";
    #    functionCon += [inventLocationId, wmsLocationId];
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPalletLoadUnload выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPalletLoadUnload
    #// <_0341_BCSWmsShipmentLoadUnload> 18.7.2016 PS
    #static void BCSTestPalletLoadUnload(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    inventLocationId;
    #    WmsLocationId       wmsLocationId;
    #    WmsPalletId         palletId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::PalletLoad;
    #    //funcId      = InventBarcodeReaderInterfaceFunction::PalletUnload;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "cs"; // "en-gb";
    #    pinCoded    = "MDAwMQ=="; // "0001"
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #
    #    // Function specific paramters
    #    inventLocationId    = "FP";
    #    wmsLocationId       = "G09";
    #    palletId            = "085956116001534912"; // Set pallet ID
    #    functionCon += [inventLocationId, wmsLocationId, palletId];
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPalletMove выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPalletMove
    #// <_DRY_0071_PalletMoveBlocked> 23.4.2014 RN
    #static void BCSTestPalletMove(Args _args)
    #{
    #    /*
    #    container   inputParamCon;
    #    str         ret;
    #    UtcDateTime dateTime;
    #    str         dateTimeStr;
    #    ;
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    inputParamCon   = [
    #        1, //InventBarcodeReaderInterfaceFunction::PalletMove,   // function ID
    #        "term2",      // terminal ID
    #        dateTimeStr,    //DateTimeUtil::utcNow(),
    #        "085956116000794065", // pallet
    #        "FP", //"FP",   // warehouse
    #        "A38"];//"IN"];  // location
    #
    #    ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #
    #    info(ret);
    #    */
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    inventLocationId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::PalletMove;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "en-gb"; // "cs";
    #    pinCoded    = "MTExMQ=="; // "1111"
    #
    #    // Function specific paramters
    #    inventLocationId    = "RM";
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded,
    #                   "085956116003214492", // pallet
    #                  "FP", //"FP",   // warehouse
    #                  "D32"];//"IN"];  // location
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPalletTransportComplete выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPalletTransportComplete
    #// 11.1.2016 RN
    #static void BCSTestPalletTransportComplete(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    inventLocationId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::CompletePaleteTransport;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "cs"; // "en-gb";
    #    pinCoded    = "MDAwMQ=="; // "0001"
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #
    #    // Function specific paramters
    #    functionCon += ["085956116002948374","FP","G09"];
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPalletTransportList выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPalletTransportList
    #// 11.1.2016 RN
    #static void BCSTestPalletTransportList(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    inventLocationId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::PalletTransportList;
    #    terminalId  = "term11";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "en-gb"; // "cs";
    #    pinCoded    = "MTExMQ=="; // "1111"
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #
    #    // Function specific paramters
    #    functionCon += ["",     //
    #                    3];   // TransportType (0 - InTransport, 1 - OutTransport , 2 - ToQA, 3 - Refill, 100 - ALL)
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPalletTransportStart выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPalletTransportStart
    #// 11.1.2016 RN
    #static void BCSTestPalletTransportStart(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    inventLocationId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::StartPalletTransport;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "cs"; // "en-gb";
    #    pinCoded    = "MDAwMQ=="; // "0001"
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #
    #    // Function specific paramters
    #    functionCon += ["085956116003305190","252263"];
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPickingRoutePick выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPickingRoutePick
    #// <_0363_BcsPickingRoute> 4.10.2016 PS
    #static void BCSTestPickingRoutePick(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    inventLocationId;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::PickingRoutePick;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "cs"; // "en-gb";
    #    pinCoded    = "MjIyMg=="; // "0001"
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #
    #    // Function specific paramters
    #    functionCon += ["013550_116",   // PickingListId
    #                    "",             // InventTransId
    #                    "224021",             // ItemId
    #                    "",             // config
    #                    "",             // warehouse
    #                    "FP/C24",          // wms location
    #                    "085956116003311948",     // pallet
    #                    "",             // batch
    #                    1000,           // qty
    #                    "",             // bcs unit
    #                    "085956116004311999",   // picking pallet ID
    #                    "euro"];                // picking pallet type ID
    #
    #    // Function call
    #    //ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
    #
    #
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestPrintPallet выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestPrintPallet
    #// <_0181_DRY_LabelsForCOOP> 22.4.2015 RN
    #static void BCSTestPrintPallet(Args _args)
    #{
    #    container       inputParamCon;
    #    str             ret;
    #    str             terminalId;
    #    UtcDateTime     dateTime;
    #    str             dateTimeStr;
    #    WmsPalletId     palletId;
    #    ProdId          prodId;
    #    Qty             qty;
    #    InventBarcodeReaderWSInterface  inventBarcodeReaderWSInterface;
    #    ;
    #
    #    terminalId  = "Term8";
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    // Only print specified pallet
    #    palletId    = "085956116000073726";
    #
    #    inputParamCon   = [
    #        enum2int(InventBarcodeReaderInterfaceFunction::PalletRegistration),
    #        terminalId,
    #        dateTimeStr,
    #        prodId,   // ProdId
    #        palletId,
    #        qty];
    #
    #    inventBarcodeReaderWSInterface = InventBarcodeReaderWSInterface::construct(inputParamCon);
    #    inventBarcodeReaderWSInterface.printLabel(palletId);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestProdInventUnpick выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestProdInventUnpick
    #// <_0261_BCSInventUnpick> 16.12.2015 RN
    #static void BCSTestProdInventUnpick(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    InventLocationId    inventLocationId;
    #    ItemId              itemId;
    #    WmsPalletId         palletId;
    #    InventBatchId       batchId;
    #    WmsLocationId       wmsLocationId;
    #    Qty                 qty;
    #    UnitId              unitId;
    #    ProdId              prodId;
    #    boolean             crossCheckConfirmed;
    #    boolean             bcs2015;
    #    ;
    #
    #    bcs2015 = false;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::InventPick;
    #    terminalId  = "term2";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    if (bcs2015)
    #    {
    #        langId      = "cs"; // "en-gb";
    #        pinCoded    = "NDI5Mg=="; // "0002"
    #    }
    #
    #    // Function specific parameters
    #    prodId                  = "003806";
    #    //itemId                  = "A10003";
    #    palletId                = "085956116002176258";
    #    batchId                 = "";
    #    inventLocationId        = "";
    #    wmsLocationId           = "HLI1/pick";
    #    qty                     = -800;
    #    unitId                  = "kg";
    #    crossCheckConfirmed     = false;
    #
    #    // Compose parameter container
    #    if (bcs2015)
    #    {
    #        functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded];
    #    }
    #    else
    #    {
    #        functionCon = [funcId,terminalId,dateTimeStr];
    #    }
    #
    #    functionCon = functionCon +
    #                  [prodId,
    #                   "",
    #                   itemId,
    #                   "", // configId
    #                   inventLocationId,
    #                   wmsLocationId,
    #                   palletId,
    #                   batchId,
    #                   qty,
    #                   unitId,
    #                   crossCheckConfirmed];
    #
    #    // Function call
    #    if (bcs2015)
    #    {
    #        ret = BCSBase::call(functionCon);
    #    }
    #    else
    #    {
    #        ret = InventBarcodeReaderWSInterface::call(functionCon);
    #    }
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestProdRegisterPallet выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestProdRegisterPallet
    #// <_DRY_0010_BCSInventCounting> 27.3.2014 RN
    #static void BCSTestProdRegisterPallet(Args _args)
    #{
    #    container   inputParamCon;
    #    str         ret;
    #    UtcDateTime dateTime;
    #    str         dateTimeStr;
    #    ;
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    inputParamCon   = [
    #        30,             // InventBarcodeReaderInterfaceFunction::InventPick,   // function ID
    #        "term1",        // terminal ID
    #        dateTimeStr,
    #        "001186",             // ProdId
    #        "",             // palletId
    #        0];             // qty
    #
    #    ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestRegisterPalletFromProduction выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestRegisterPalletFromProduction
    #// <VYN_SCA01> PESE
    #static void BCSTestRegisterPalletFromProduction(Args _args)
    #{
    #    //InventBarcodeReaderWSInterface  inventBarcodeReaderWSInterface;
    #    container       inputParamCon;
    #    str             ret;
    #    str             terminalId;
    #    UtcDateTime     dateTime;
    #    str             dateTimeStr;
    #    WmsPalletId     palletId;
    #    ProdId          prodId;
    #    Qty             qty;
    #    ;
    #
    #    terminalId  = "Term8";
    #
    #    // REGISTER PALLET FROM PRODUCTION
    #    prodId      = "004643";
    #    palletId    = "";
    #    qty         = 0;
    #
    #
    #    dateTime = DateTimeUtil::utcNow();
    #
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #
    #    inputParamCon   = [
    #        enum2int(InventBarcodeReaderInterfaceFunction::PalletRegistration),
    #        terminalId,
    #        dateTimeStr,
    #        prodId,   // ProdId
    #        palletId,
    #        qty];
    #
    #    ret = InventBarcodeReaderWSInterface::call(inputParamCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: JOB

; Microsoft Dynamics AX Job: BCSTestRegisterPalletFromProduction2 выгружен
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #BCSTestRegisterPalletFromProduction2
    #// <_0259_BCS_2015> 20.10.2015 RN
    #static void BCSTestRegisterPalletFromProduction2(Args _args)
    #{
    #    container           functionCon;
    #    str                 ret;
    #    UtcDateTime         dateTime;
    #    str                 dateTimeStr;
    #    LanguageId          langId;
    #    str                 pinCoded;
    #    InventBRTerminalId  terminalId;
    #    InventBarcodeReaderInterfaceFunction    funcId;
    #    ProdId              prodId;
    #    WmsPalletId         palletId;
    #    Qty                 qty;
    #    ;
    #
    #    // General parameters
    #    funcId      = InventBarcodeReaderInterfaceFunction::PalletRegistration;
    #    terminalId  = "term11";
    #    dateTime    = DateTimeUtil::utcNow();
    #    dateTimeStr = strFmt("%1 %2",
    #                     date2str(DateTimeUtil::date(dateTime), 123, 2,2,2,2,4),
    #                     time2str(DateTimeUtil::time(dateTime),0,0));
    #    langId      = "en-gb"; // "en-gb";
    #    pinCoded    = "MjIyMg=="; // "0001"
    #
    #    // Function specific paramters
    #    prodId      = "006102";
    #    palletId    = "";
    #    qty         = 0;
    #
    #    // Compose parameter container
    #    functionCon = [funcId,terminalId,dateTimeStr,langId,pinCoded,
    #                   prodId,palletId,qty
    #                  ];
    #
    #    // Function call
    #    ret = BCSBase::call(functionCon);
    #
    #    info(ret);
    #}
  ENDSOURCE

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletBlockingBlock выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletBlockingBlock
    Id 50254
    PROPERTIES
      Name                #BCSPalletBlockingBlock
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// TODO 11.1.2016 RN
        #class BCSPalletBlockingBlock extends BCSBase
        #{
        #    // Parameters
        #    WmsPalletId             palletId;
        #    WMSPalletBlockingCodeID palletBlockingCodeId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF5.2';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    [palletId,
        #     palletBlockingCodeId] = this.funcParamCon();
        #
        #    // <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 1));
        #    // </_DRY_0078_BCSGS1Code128AIHandling>
        #}
      ENDSOURCE
      SOURCE #palletId
        #protected WMSPalletId palletId()
        #{
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WMSPalletBlock  wmsBlockPallet = WMSPalletBlock_Block::construct();
        #    ;
        #
        #    wmsBlockPallet.parmDateTime(execDateTime);
        #    wmsBlockPallet.parmWMSPalletBlockingCodeID(palletBlockingCodeId);
        #    wmsBlockPallet.parmWMSPalletId(palletId);
        #    wmsBlockPallet.run();
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean         ok = super();
        #    ;
        #
        #    if (!palletId)
        #    {
        #        ok = checkFailed("@ADR188");
        #    }
        #
        #    if (!palletBlockingCodeId)
        #    {
        #        ok = checkFailed("@ADR524"); // TODO: Label
        #    }
        #    else
        #    {
        #        if(!WMSPalletBlockingCodes::exist(palletBlockingCodeId))
        #        {
        #            throw error(strFmt("@DRC47",palletBlockingCodeId));
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletBlockingCodeList выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletBlockingCodeList
    Id 50252
    PROPERTIES
      Name                #BCSPalletBlockingCodeList
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// TODO 11.1.2016 RN
        #class BCSPalletBlockingCodeList extends BCSBase
        #{
        #    // There are no function specific parameters for this function
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF5.1';
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WMSPalletBlockingCodes  wmsPalletBlockingCodes;
        #    container               conLine;
        #    List                    resultList = new List(Types::String);
        #    ;
        #
        #    while select wmsPalletBlockingCodes
        #    {
        #        /*
        #        this.addRetValueCon(wmsPalletBlockingCodes.BlockingCodeID);
        #        this.addRetValueCon(wmsPalletBlockingCodes.BlockingType);
        #        this.addRetValueCon(wmsPalletBlockingCodes.Description);
        #        this.addRetValueCon(enum2str(wmsPalletBlockingCodes.BlockingType));
        #        */
        #
        #        conLine = conNull();
        #
        #        // TODO: Why????
        #        //this.initSystemLineFilds(conLine);
        #        //conLine += this.funcIdStr();
        #        //conLine += terminalId;
        #        //conLine += execDateTimeStr;
        #
        #        // This is the actual require data
        #        conLine += wmsPalletBlockingCodes.BlockingCodeID;
        #        conLine += int2str(wmsPalletBlockingCodes.BlockingType);
        #        conLine += wmsPalletBlockingCodes.Description;
        #        conLine += enum2str(wmsPalletBlockingCodes.BlockingType);
        #
        #        // TODO: Make sure the class InventBarcodeReaderWSInterface is not used!
        #        //resultList.addEnd(InventBarcodeReaderWSInterface::convertToCVSString(conLine, conlen(conLine)));
        #        this.addRetValueCon(InventBarcodeReaderWSInterface::convertToCVSString(conLine, conlen(conLine)));
        #    }
        #
        #    //this.addRetValueCon(resultList.xml());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletBlockingUnblock выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletBlockingUnblock
    Id 50255
    PROPERTIES
      Name                #BCSPalletBlockingUnblock
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// TODO 11.1.2016 RN
        #class BCSPalletBlockingUnblock extends BCSBase
        #{
        #    // Parameters
        #    WmsPalletId             palletId;
        #    WMSPalletBlockingCodeID palletBlockingCodeId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF5.2';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    [palletId,
        #     palletBlockingCodeId] = this.funcParamCon();
        #
        #    // <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 1));
        #    // </_DRY_0078_BCSGS1Code128AIHandling>
        #}
      ENDSOURCE
      SOURCE #palletId
        #protected WMSPalletId palletId()
        #{
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WMSPalletBlock  wmsBlockPallet = WMSPalletBlock_UnBlock::construct();
        #    ;
        #
        #    wmsBlockPallet.parmDateTime(execDateTime);
        #    wmsBlockPallet.parmWMSPalletBlockingCodeID(palletBlockingCodeId);
        #    wmsBlockPallet.parmWMSPalletId(palletId);
        #    wmsBlockPallet.run();
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean         ok = super();
        #    ;
        #
        #    if (!palletId)
        #    {
        #        ok = checkFailed("@ADR188");
        #    }
        #
        #    if (!palletBlockingCodeId)
        #    {
        #        ok = checkFailed("@ADR524"); // TODO: Label
        #    }
        #    else
        #    {
        #        if(!WMSPalletBlockingCodes::exist(palletBlockingCodeId))
        #        {
        #            throw error(strFmt("@DRC47",palletBlockingCodeId));
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletInfo выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletInfo
    Id 50214
    PROPERTIES
      Name                #BCSPalletInfo
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// <_0259_BCS_2015> 13.11.2015 RN
        #public class BCSPalletInfo extends BCSBase
        #{
        #    // Parameters
        #    WmsPalletId            palletId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'PalletInfo';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    // <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 1));
        #    // </_DRY_0078_BCSGS1Code128AIHandling>
        #}
      ENDSOURCE
      SOURCE #palletId
        #// <_0340_BcsLogPalletId> 19.6.2016 PESE
        #protected WMSPalletId palletId()
        #{;
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WmsPallet               wmsPallet;
        #    InventDimOnHand         inventDimOnHand;
        #    SetEnumerator           se;
        #    InventDimOnHandMember   member;
        #    ItemId                  itemId;
        #    ItemName                itemName;
        #    InventBatchId           inventBatchId;
        #    InventDim               inventDim;
        #    BCSUnitId               bcsInventUnitId;
        #    InventTable             inventTable;
        #    BCSUnitTable            bcsUnitTable;
        #    ;
        #
        #    wmsPallet = WmsPallet::find(palletId);
        #
        #    if (!wmsPallet)
        #    {
        #        throw error(strFmt("@SYS60578", palletId));
        #    }
        #
        #
        #    //inventDimOnHand = wmsPallet.onHandAvailableDetailed(); TODO
        #    inventDimOnHand = wmsPallet.onHandItem();
        #    se              = inventDimOnHand.getEnumerator();
        #    while (se.moveNext())
        #    {
        #        member      = se.current();
        #        inventDim   = InventDim::find(member.parmInventDimId());
        #
        #        // ItemId
        #        if (itemId)
        #        {
        #            if (itemId != member.parmItemId())
        #            {
        #                itemId = '*';
        #            }
        #        }
        #        else
        #        {
        #            itemId = member.parmItemId();
        #        }
        #
        #        // InventBatchId
        #        if (inventBatchId)
        #        {
        #            if (inventDim.inventBatchId &&
        #                inventBatchId != inventDim.inventBatchId)
        #            {
        #                inventBatchId = '*';
        #            }
        #        }
        #        else
        #        {
        #            inventBatchId = inventDim.inventBatchId;
        #        }
        #    }
        #
        #    if (itemId)
        #    {
        #        inventTable     = InventTable::find(itemId);
        #        itemName        = inventTable.itemName();
        #        bcsInventUnitId = BCSUnitTable::findUnitId(inventTable.inventUnitId()).BCSUnitId;
        #    }
        #    // <_0371_DRY_BCSPalletInfo_AddErrorEmptyPal> 24.10.2016 ZN
        #    else
        #    {
        #        throw error(strFmt("@ADR606"));
        #    }
        #    // </_0371_DRY_BCSPalletInfo_AddErrorEmptyPal>
        #
        #    this.addRetValueCon(itemId);
        #    this.addRetValueCon(itemName);
        #    this.addRetValueCon(wmsPallet.inventLocationId);
        #    this.addRetValueCon(wmsPallet.wMSLocationId);
        #    this.addRetValueCon(wmsPallet.WMSPalletBlockingCodeID);
        #    this.addRetValueCon(inventBatchId);
        #    this.addRetValueCon(bcsInventUnitId);
        #
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean         ok = super();
        #    ;
        #
        #    if (!palletId)
        #    {
        #        ok = checkFailed("@ADR188");
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletInfoItem выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletInfoItem
    Id 50366
    PROPERTIES
      Name                #BCSPalletInfoItem
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// <_0350_BcsPalletInfoExt> 24.7.2016 PS
        #public class BCSPalletInfoItem extends BCSBase
        #{
        #    // Parameters
        #    ItemId          itemId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'Pallet info - item';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    [itemId]    = this.funcParamCon();
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WmsPallet               wmsPallet;
        #    InventDim               inventDim;
        #    container               conLine;
        #    InventSum               inventSum;
        #    ;
        #
        #    while select sum(PhysicalInvent) from InventSum
        #        where       inventSum.ItemId == itemId  &&
        #                    inventSum.Closed == NoYes::No
        #        join        inventDim
        #        group by    WmsPalletId, InventLocationId, WmsLocationId
        #        where       inventDim.inventDimId   == inventSum.InventDimId &&
        #                    inventDim.wMSPalletId
        #    {
        #        if (inventSum.PhysicalInvent != 0)
        #        {
        #            wmsPallet = WmsPallet::find(inventDim.wMSPalletId);
        #
        #            // This is the actual require data
        #            conLine = conNull();
        #            conLine += inventDim.InventLocationId;
        #            conLine += inventDim.wMSLocationId;
        #            conLine += wmsPallet.wMSPalletId;
        #            conLine += wmsPallet.WMSPalletBlockingCodeID;
        #
        #            // TODO: Make sure the class InventBarcodeReaderWSInterface is not used!
        #            this.addRetValueCon(InventBarcodeReaderWSInterface::convertToCVSString(conLine, conlen(conLine)));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean     ret;
        #    ;
        #
        #    ret = super();
        #
        #    if (!itemId)
        #    {
        #        ret = checkFailed("@GEE34935");
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletInfoLocation выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletInfoLocation
    Id 50365
    PROPERTIES
      Name                #BCSPalletInfoLocation
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// <_0350_BcsPalletInfoExt> 24.7.2016 PS
        #public class BCSPalletInfoLocation extends BCSBase
        #{
        #    // Parameters
        #    InventLocationId    warehouseId; // Outbound gate
        #    WmsLocationId       locationId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'Pallet info - location';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    [warehouseId,
        #     locationId] = this.funcParamCon();
        #
        #    // Get warehouse/location from scanned location
        #    [warehouseId, locationId] = BCSBase::wmsWhLocSplit(conPeek(this.funcParamCon(), 2), warehouseId);
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WmsPallet               wmsPallet;
        #    InventDim               inventDim;
        #    container               conLine;
        #    InventSum               inventSum;
        #    InventTable             inventTable;
        #    ;
        #
        #    while select sum(PhysicalInvent) from InventSum
        #        group by    ItemId
        #        where       inventSum.PhysicalInvent    != 0    &&
        #                    inventSum.Closed            == NoYes::No
        #        join        inventDim
        #        group by    WmsPalletId, InventLocationId, WmsLocationId
        #        where       inventDim.inventDimId       == inventSum.InventDimId &&
        #                    inventDim.InventLocationId  == warehouseId  &&
        #                    inventDim.wMSLocationId     == locationId   &&
        #                    inventDim.wMSPalletId
        #    {
        #        if (inventSum.PhysicalInvent != 0)
        #        {
        #            wmsPallet   = WmsPallet::find(inventDim.wMSPalletId);
        #            inventTable = InventTable::find(inventSum.ItemId);
        #
        #            // This is the actual require data
        #            conLine = conNull();
        #            conLine += inventSum.ItemId;
        #            conLine += inventTable.ItemName;
        #            conLine += wmsPallet.wMSPalletId;
        #            conLine += wmsPallet.WMSPalletBlockingCodeID;
        #
        #            // TODO: Make sure the class InventBarcodeReaderWSInterface is not used!
        #            this.addRetValueCon(InventBarcodeReaderWSInterface::convertToCVSString(conLine, conlen(conLine)));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #process_OLD
        #protected void process_OLD()
        #{
        #    WmsPallet               wmsPallet;
        #    InventDimOnHand         inventDimOnHand;
        #    SetEnumerator           se;
        #    InventDimOnHandMember   member;
        #    ItemId                  itemId;
        #    ItemName                itemName;
        #    InventDim               inventDim;
        #    InventTable             inventTable;
        #    container               conLine;
        #    ;
        #
        #    while select wmsPallet
        #        where   wmsPallet.inventLocationId  == warehouseId  &&
        #                wmsPallet.wMSLocationId     == locationId
        #    {
        #        inventDimOnHand = wmsPallet.onHandAvailableDetailed();
        #        se              = inventDimOnHand.getEnumerator();
        #        while (se.moveNext())
        #        {
        #            member      = se.current();
        #            if (member.parmInventQty() != 0)
        #            {
        #                inventDim   = InventDim::find(member.parmInventDimId());
        #                itemId      = member.parmItemId();
        #                inventTable = InventTable::find(itemId);
        #                itemName    = inventTable.itemName();
        #
        #                // This is the actual require data
        #                conLine = conNull();
        #                conLine += itemId;
        #                conLine += itemName;
        #                conLine += wmsPallet.wMSPalletId;
        #                conLine += wmsPallet.WMSPalletBlockingCodeID;
        #
        #                // TODO: Make sure the class InventBarcodeReaderWSInterface is not used!
        #                this.addRetValueCon(InventBarcodeReaderWSInterface::convertToCVSString(conLine, conlen(conLine)));
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean     ret;
        #    ;
        #
        #    ret = super();
        #
        #    if (!warehouseId)
        #    {
        #        ret = checkFailed("@SYS85069");
        #    }
        #
        #    if (!locationId)
        #    {
        #        ret = checkFailed("@ADR189");
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletLoad выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletLoad
    Id 50360
    PROPERTIES
      Name                #BCSPalletLoad
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// <_0341_BCSWmsShipmentLoadUnload> 18.7.2016 PS
        #public class BCSPalletLoad extends BcsBase
        #{
        #    InventLocationId    warehouseId;
        #    WmsLocationId       locationId; // Outbound gate
        #    WMSPalletId         palletId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'PalletLoad';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    [warehouseId,
        #     locationId,
        #     palletId] = this.funcParamCon();
        #
        #    // Get warehouse/location from scanned location
        #    [warehouseId, locationId] = BCSBase::wmsWhLocSplit(conPeek(this.funcParamCon(), 2), warehouseId);
        #
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 3));
        #}
      ENDSOURCE
      SOURCE #palletId
        #protected WMSPalletId palletId()
        #{;
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WmsOrderTrans   wmsOrderTrans;
        #    InventDim       inventDim;
        #    ;
        #
        #    select firstOnly wmsOrderTrans
        #        join    inventDim
        #        where   wmsOrderTrans.expeditionStatus  == WMSExpeditionStatus::Staged  &&
        #                wmsOrderTrans.toInventDimId     == inventDim.inventDimId        &&
        #                inventDim.wMSPalletId           == palletId                     &&
        #                inventDim.InventLocationId      == warehouseId                  &&
        #                inventDim.wMSLocationId         == locationId;
        #
        #    if (!wmsOrderTrans)
        #    {
        #        throw error("@ADR578");
        #    }
        #
        #    WMSShipmentLineLoad::loadPallets(wmsOrderTrans.ShipmentId, inventDim);
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean     ret;
        #    WmsPallet   wmsPallet;
        #    ;
        #
        #    ret = super();
        #
        #    if (!warehouseId)
        #    {
        #        ret = checkFailed("@SYS85069");
        #    }
        #
        #    if (!locationId)
        #    {
        #        ret = checkFailed("@ADR189");
        #    }
        #
        #    if (!palletId)
        #    {
        #        ret = checkFailed("@ADR188");
        #    }
        #    else
        #    {
        #        wmsPallet = WmsPallet::find(palletId);
        #        if (!wmsPallet)
        #        {
        #            ret = checkFailed(strFmt("@SYS50578", palletId));
        #        }
        #
        #        if (wmsPallet.inventLocationId  != warehouseId ||
        #            wmsPallet.wMSLocationId     != locationId)
        #        {
        #            ret = checkFailed(strFmt("@SYS78824", palletId, locationId, warehouseId));
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletLoadList выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletLoadList
    Id 50363
    PROPERTIES
      Name                #BCSPalletLoadList
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// <_0341_BCSWmsShipmentLoadUnload> 18.7.2016 PS
        #public class BCSPalletLoadList extends BcsBase
        #{
        #    InventLocationId    warehouseId; // Outbound gate
        #    WmsLocationId       locationId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'PalletLoadList';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    [warehouseId,
        #     locationId] = this.funcParamCon();
        #
        #    // Get warehouse/location from scanned location
        #    [warehouseId, locationId] = BCSBase::wmsWhLocSplit(conPeek(this.funcParamCon(), 2), warehouseId);
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WmsOrderTrans   wmsOrderTrans;
        #    InventDim       inventDim;
        #    Set             palletIdSet;
        #    SetEnumerator   se;
        #    ;
        #
        #    palletIdSet = new Set(Types::String);
        #
        #    while select wmsOrderTrans
        #        join    inventDim
        #        where   wmsOrderTrans.expeditionStatus  == WMSExpeditionStatus::Staged  &&
        #                wmsOrderTrans.toInventDimId     == inventDim.inventDimId        &&
        #                inventDim.InventLocationId      == warehouseId                  &&
        #                inventDim.wMSLocationId         == locationId
        #    {
        #        palletIdSet.add(inventDim.wMSPalletId);
        #    }
        #
        #    se = palletIdSet.getEnumerator();
        #    while (se.moveNext())
        #    {
        #        this.addRetValueCon(se.current());
        #    }
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean     ret;
        #    ;
        #
        #    ret = super();
        #
        #    if (!warehouseId)
        #    {
        #        ret = checkFailed("@SYS85069");
        #    }
        #
        #    if (!locationId)
        #    {
        #        ret = checkFailed("@ADR189");
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletMove выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletMove
    Id 50056
    PROPERTIES
      Name                #BCSPalletMove
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// <_DRY_0071_PalletMoveBlocked> 23.4.2014 RN
        #class BCSPalletMove extends BCSBase
        #{
        #    // Parameters
        #    WmsPalletId         palletId;
        #    InventLocationId    warehouseId;
        #    WmsLocationId       wmsLocationId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF1.1';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    // PickingListPicking(
        #    // string TerminlId, DateTime excecDateTime,
        #    // string PickingListId, string InventTransId, string ItemId, string ConfigID, string WarehouseId, string LocationId, string PalletId, string BatchId, double Quantity);
        #
        #    [palletId,
        #     warehouseId,
        #     wmsLocationId] = this.funcParamCon();
        #
        #    // <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 1));
        #    // </_DRY_0078_BCSGS1Code128AIHandling>
        #
        #    // Get warehouse/location from scanned location
        #    [warehouseId, wmslocationId] = BCSBase::wmsWhLocSplit(conPeek(this.funcParamCon(), 3), warehouseId);
        #}
      ENDSOURCE
      SOURCE #palletId
        #protected WMSPalletId palletId()
        #{
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WmsPalletMove           wmsPalletMove;
        #    WmsPallet               wmsPallet;
        #    ;
        #
        #    wmsPallet   = WmsPallet::find(palletId);
        #
        #    if (!wmsPallet)
        #    {
        #        throw error(strFmt("@SYS60578", palletId));
        #    }
        #
        #    if (wmsPallet.transportExists())
        #        throw(error(strfmt("@SYS50344", wmsPallet.wmsTransport().TransportId)));
        #
        #    if (wmsPallet.isPalletBlocked())
        #        this.addRetValueCon(strfmt("@VYN22",wmsPallet.wMSPalletId,wmsPallet.WMSPalletBlockingCodeID));
        #
        #    // <_DRY_0316_CheckEmptyPallet> 8.4.2016 RN
        #    if (!wmsPallet.physicalInvent())
        #    {
        #        throw error("@ADR543");
        #    }
        #    // </_DRY_0316_CheckEmptyPallet>
        #
        #    // <_0357_BcsPalletMoveBlocked> 9.9.2016 PS
        #    if (BcsParameters::find().PreventPalletMoveToBlockedLocation &&
        #        WmsLocation::find(wmsLocationId, warehouseId).inputBlockingCauseId)
        #    {
        #        throw error(strfmt("@SYS72264", wmsLocationId));
        #    }
        #    // </_0357_BcsPalletMoveBlocked>
        #
        #    wmsPalletMove = WMSPalletMove::newStandard(palletId, warehouseId);
        #    wmsPalletMove.parmToLocationId(wmsLocationId);
        #
        #    wmsPalletMove.run();
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean         ok = super();
        #    ;
        #
        #    if (!palletId)
        #    {
        #        ok = checkFailed("@ADR188");
        #    }
        #
        #    if (!warehouseId)
        #    {
        #        ok = checkFailed("@SYS85069");
        #    }
        #
        #    if (!wmsLocationId)
        #    {
        #        ok = checkFailed("@ADR189");
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletTransportComplete выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletTransportComplete
    Id 50292
    PROPERTIES
      Name                #BCSPalletTransportComplete
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #public class BCSPalletTransportComplete extends BcsBase
        #{
        #    WMSPalletId         palletId;
        #    InventLocationId    inventLocationId;
        #    WMSLocationId       wmsLocationId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF2.4';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    [palletId,inventLocationId,wmsLocationId] = this.funcParamCon();
        #
        #    // <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 1));
        #    // </_DRY_0078_BCSGS1Code128AIHandling>
        #}
      ENDSOURCE
      SOURCE #palletId
        #protected WMSPalletId palletId()
        #{;
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WMSTransport                    wmsTransport;
        #    WmsTransportChangeToLocation    changeToLocation;
        #    WMSTransportFinish              wmsTransportFinish;
        #    ;
        #
        #    select firstonly forupdate wmsTransport
        #        where   wmsTransport.wMSPalletId        == palletId &&
        #                wmsTransport.expeditionStatus   == WMSExpeditionStatus::Started;
        #
        #    if (!wmsTransport)
        #    {
        #        throw error("@DRC39");
        #    }
        #
        #    if (wmsTransport.toInventLocationId != inventLocationId)
        #    {
        #        throw error("@ADR487");
        #    }
        #
        #    if (wmsTransport.inputLocation != wmsLocationId)
        #    {
        #        if(!WMSLocation::exist(wmsLocationId, inventLocationId))
        #        {
        #            throw Error(strFmt("@DRC38", wmsLocationId, inventLocationId));
        #        }
        #
        #        changeToLocation = WmsTransportChangeToLocation::construct();
        #        changeToLocation.parmWMSTransportId(wmsTransport.transportId);
        #        changeToLocation.parmInventLocationId(wmsTransport.toInventLocationId);
        #        changeToLocation.parmNewLocationId(wmsLocationId);
        #        if(!changeToLocation.validateTransport(wmsTransport))
        #        {
        #            throw error("@SYS107512");
        #        }
        #        changeToLocation.run();
        #        wmsTransport.reread();
        #    }
        #
        #    wmsTransportFinish = wmsTransportFinish::construct();
        #    wmsTransportFinish.addTransport(wmsTransport);
        #    wmsTransportFinish.run();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletTransportList выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletTransportList
    Id 50256
    PROPERTIES
      Name                #BCSPalletTransportList
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// TODO 11.1.2016 RN
        #class BCSPalletTransportList extends BCSBase
        #{
        #    // Parameters
        #    WMSForkLiftId           forkLiftId;
        #    WMSTransportType        transPortTypeInt;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF2.1';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    [forkLiftId,
        #     transPortTypeInt] = this.funcParamCon();
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    //InventLocationId        inventLocationId;
        #    QueryBuildDataSource    qbdsWmsTransport;
        #    QueryBuildRange         operatorRange;
        #    QueryBuildRange         statusRange;
        #    QueryBuildRange         inventLocationIdRange;
        #    QueryBuildRange         transportTypeRange;
        #    WMSForkLift             forkLift;
        #    Query                   query;
        #    QueryRun                queryRun;
        #    WMSTransport            transport;
        #
        #    void addToResultSet()
        #    {
        #        container   conLine;
        #        ;
        #
        #        conLine += transport.expeditionStatus;
        #        conLine += enum2str(transport.expeditionStatus);
        #        conLine += transport.wMSPalletId;
        #        conLine += transport.fromInventLocationId;
        #        conLine += transport.fromLocation;
        #        conLine += transport.transportPriority;
        #        conLine += transport.operator;
        #        conLine += transport.transportType;
        #        conLine += enum2str(transport.transportType);
        #        conLine += transport.toInventLocationId;
        #        conLine += transport.inputLocation;
        #        conLine += transport.transportId;
        #        // <_0169_DRY_BcsItemIdentification> 27.3.2015 RN
        #        // <OLD>
        #        //conLine += InventTable::find(transport.itemId()).itemName();
        #        // </OLD>
        #        conLine += strFmt("%1 %2", transport.itemId(), InventTable::find(transport.itemId()).itemName());
        #        // </_0169_DRY_BcsItemIdentification>
        #
        #        //resultList.addEnd(InventBarcodeReaderWSInterface::convertToCVSString(conLine, conlen(conLine)));
        #        this.addRetValueCon(InventBarcodeReaderWSInterface::convertToCVSString(conLine, conlen(conLine)));
        #    }
        #    ;
        #
        #    if (forkLiftId)
        #    {
        #        forkLift = WMSForkLift::find(forkLiftId);
        #
        #        if (!forkLift)
        #        {
        #            throw error(strFmt("@DRC29", forkLiftId));
        #        }
        #    }
        #
        #    query = new Query();
        #    qbdsWmsTransport = query.addDataSource(tablenum(WMSTransport));
        #
        #    operatorRange   = SysQuery::findOrCreateRange(qbdsWmsTransport,fieldnum(WMSTransport, Operator));
        #    operatorRange.value(emplId ? SysQuery::valueEmptyString() + ' , ' + queryValue(emplId) : SysQuery::valueEmptyString());
        #    // TODO RN: Temporary solution, TBD filter pallet transports on empoloyee.
        #    operatorRange.value(SysQuery::valueUnlimited());
        #
        #    statusRange     = SysQuery::findOrCreateRange(qbdsWmsTransport, fieldnum(WMSTransport, ExpeditionStatus));
        #    statusRange.value(queryRange(enum2Value(WMSExpeditionStatus::Activated),
        #                                 enum2Value(WMSExpeditionStatus::Started)));
        #    statusRange.status(RangeStatus::Locked);
        #
        #    forkLift.initTransportHandlingQuery(qbdsWmsTransport);
        #
        #    transportTypeRange = SysQuery::findOrCreateRange(qbdsWmsTransport, fieldNum(WMSTransport, TransportType));
        #    transportTypeRange.value(transPortTypeInt == 100 ? SysQuery::valueUnlimited() : SysQuery::value(transportTypeInt));
        #
        #    //inventLocationIdRange = SysQuery::findOrCreateRange(qbdsWmsTransport, fieldnum(WMSTransport, FromInventLocationId));
        #    //inventLocationIdRange.value(inventLocationId ? queryValue(inventLocationId) : SysQuery::valueUnlimited());
        #
        #    qbdsWmsTransport.sortClear();
        #    qbdsWmsTransport.addSortIndex(indexnum(WMSTransport, OperatorStatusIdx));
        #    qbdsWmsTransport.indexIsHint(true);
        #    qbdsWmsTransport.addSortField(fieldnum(WMSTransport, Operator), SortOrder::Descending);
        #    qbdsWmsTransport.addSortField(fieldnum(WMSTransport, ExpeditionStatus), SortOrder::Descending);
        #    qbdsWmsTransport.addSortField(fieldnum(WMSTransport, TransportPriority), SortOrder::Descending);
        #    //qbdsWmsTransport.addSortField(fieldnum(WMSTransport, ActivationDateTime));
        #    //qbdsWmsTransport.addSortField(fieldnum(WMSTransport, wmsPalletId)); TODO
        #    qbdsWmsTransport.addSortField(fieldnum(WMSTransport, fromLocation));
        #    qbdsWmsTransport.addSortField(fieldnum(WMSTransport, wmsPalletId));
        #
        #
        #
        #    queryRun = new QueryRun(query);
        #
        #    while (queryRun.next())
        #    {
        #        if(queryRun.changed(tableNum(WMSTransport)))
        #        {
        #            transport = queryRun.get(tableNum(WMSTransPOrt));
        #            addToResultSet();
        #        }
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletTransportStart выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletTransportStart
    Id 50291
    PROPERTIES
      Name                #BCSPalletTransportStart
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #public class BCSPalletTransportStart extends BcsBase
        #{
        #    WMSPalletId     palletId;
        #    WmsTransportId  wmsTransportId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF2.3';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    [palletId,wmsTransportId] = this.funcParamCon();
        #
        #    // <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 1));
        #    // </_DRY_0078_BCSGS1Code128AIHandling>
        #}
      ENDSOURCE
      SOURCE #palletId
        #protected WMSPalletId palletId()
        #{;
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WMSTransport                wmsTransport;
        #    WmsTransport                wmsTransportResult;
        #    WMSTransportStart           wmsTransportStart;
        #
        #    // <PESE_20120920_SF2_PalletTransport> 21.9.2012 PESE
        #    WMSTransportPalletSwitch    wmsTransportPalletSwitch;
        #    // </PESE_20120920_SF2_PalletTransport>
        #
        #    // <_0138_BCSBlockedPalletTransport> 11.11.2014 RN
        #    WmsPallet                   wmsPallet;
        #    // </_0138_BCSBlockedPalletTransport>
        #    ;
        #
        #    select firstonly wmsTransport
        #        where WMSTransport.transportId == wmsTransportId;
        #
        #    if(!wmsTransport)
        #    {
        #        throw error("@DRC39");
        #    }
        #
        #    if (wmsTransport.expeditionStatus != WMSexpeditionStatus::Activated)
        #    {
        #        throw error(strFmt("@VYN1026", wmsTransport.expeditionStatus));
        #    }
        #
        #    // <_0138_BCSBlockedPalletTransport> 11.10.2014 RN
        #    wmsPallet = WmsPallet::find(palletId);
        #    if (wmsPallet && wmsPallet.isPalletBlocked())
        #    {
        #        throw error(strFmt("@ADR488", wmsPallet.WMSPalletBlockingCodeID));
        #    }
        #    // </_0138_BCSBlockedPalletTransport>
        #
        #    // <PESE_20120920_SF2_PalletTransport> 21.9.2012 PESE
        #    if (palletId != wmsTransport.wMSPalletId)
        #    {
        #        // Switch pallet
        #        wmsTransportPalletSwitch = WMSTransportPalletSwitch::construct();
        #        wmsTransportPalletSwitch.getLast();
        #
        #        wmsTransportPalletSwitch.parmWMSTransportId(WMSTransport.TransportId);
        #        wmsTransportPalletSwitch.parmWMSPalletId(palletId);
        #
        #        wmsTransportPalletSwitch.run();
        #
        #        wmsTransport.reread(); // reread - wmsTransport has been changed with pallet switching function
        #    }
        #    // </PESE_20120920_SF2_PalletTransport>
        #
        #    wmsTransportStart = WMSTransportStart::newTransport(wmsTransport);
        #    wmsTransportStart.parmEmplId(emplId);
        #
        #    if(!wmsTransport.isNewToPalletRequiredDisplay())//best guess is existing pallet at to location
        #    {
        #        wmsTransportStart.parmWmsPalletIdTo(wmsTransport.wmsPalletId);
        #    }
        #    else
        #    {
        #        throw error("@DRC42"); //Nutno zadat cílovou paletu na výdejním místě.
        #    }
        #
        #    wmsTransportStart.run();
        #
        #    select firstonly WMSTransportResult
        #        where WMSTransportResult.RecId == WMSTransport.RecId;
        #
        #    this.addRetValueCon(WMSTransportResult.toInventLocationId);
        #    this.addRetValueCon(WMSTransportResult.inputLocation);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPalletUnload выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPalletUnload
    Id 50361
    PROPERTIES
      Name                #BCSPalletUnload
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// <_0341_BCSWmsShipmentLoadUnload> 18.7.2016 PS
        #public class BCSPalletUnload extends BcsBase
        #{
        #    InventLocationId    warehouseId;
        #    WmsLocationId       locationId; // Outbound gate
        #    WMSPalletId         palletId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'PalletUnload';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    [warehouseId,
        #     locationId,
        #     palletId] = this.funcParamCon();
        #
        #    // Get warehouse/location from scanned location
        #    [warehouseId, locationId] = BCSBase::wmsWhLocSplit(conPeek(this.funcParamCon(), 2), warehouseId);
        #
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 3));
        #}
      ENDSOURCE
      SOURCE #palletId
        #protected WMSPalletId palletId()
        #{;
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WmsOrderTrans   wmsOrderTrans;
        #    InventDim       inventDim;
        #    WmsPallet       wmsPallet;
        #    ;
        #
        #    select firstOnly wmsOrderTrans
        #        join    inventDim
        #        where   wmsOrderTrans.expeditionStatus  == WMSExpeditionStatus::Loaded  &&
        #                wmsOrderTrans.toInventDimId     == inventDim.InventDimId        &&
        #                inventDim.wMSPalletId           == palletId                     &&
        #                inventDim.InventLocationId      == warehouseId                  &&
        #                inventDim.wMSLocationId         == locationId;
        #
        #    if (!wmsOrderTrans)
        #    {
        #        throw error("@ADR579");
        #    }
        #
        #    WmsShipmentLineUnload::unloadPallets(wmsOrderTrans.ShipmentId, inventDim);
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean     ret;
        #    WmsPallet   wmsPallet;
        #    ;
        #
        #    ret = super();
        #
        #    if (!warehouseId)
        #    {
        #        ret = checkFailed("@SYS85069");
        #    }
        #
        #    if (!locationId)
        #    {
        #        ret = checkFailed("@ADR189");
        #    }
        #
        #    if (!palletId)
        #    {
        #        ret = checkFailed("@ADR188");
        #    }
        #    else
        #    {
        #        wmsPallet = WmsPallet::find(palletId);
        #        if (!wmsPallet)
        #        {
        #            ret = checkFailed(strFmt("@SYS50578", palletId));
        #        }
        #
        #        if (wmsPallet.inventLocationId  != warehouseId ||
        #            wmsPallet.wMSLocationId     != locationId)
        #        {
        #            ret = checkFailed(strFmt("@SYS78824", palletId, locationId, warehouseId));
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSPickingRoutePick выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSPickingRoutePick
    Id 50094
    PROPERTIES
      Name                #BCSPickingRoutePick
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #checkRequestedQtyPicked
        #private void checkRequestedQtyPicked(WmsOrder _wmsOrder)
        #{
        #    WmsOrderTrans   wmsOrderTrans;
        #    ;
        #
        #    select sum(Qty) from wmsOrderTrans
        #        where   wmsOrderTrans.OrderId          == _wmsOrder.OrderId    &&
        #                wmsOrderTrans.ExpeditionStatus >= WMSExpeditionStatus::Picked;
        #
        #    if (wmsOrderTrans.qty >= _wmsOrder.qtyRequested)
        #    {
        #        // Cancel all remaining lines
        #        while select forUpdate wmsOrderTrans
        #            where   wmsOrderTrans.orderId          == _wmsOrder.OrderId    &&
        #                    wmsOrderTrans.ExpeditionStatus <  WMSExpeditionStatus::Picked
        #        {
        #            wmsOrderTrans.cancel();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class BCSPickingRoutePick extends BCSBase
        #{
        #    // Parameters
        #    WMSPickingRouteID   pickingRouteID;
        #    InventTransId       inventTransId;
        #    ItemId              itemId;
        #    ConfigId            configId;
        #    InventLocationId    warehouseId;
        #    WmsLocationId       locationId;
        #    WmsPalletId         palletId;
        #    InventBatchId       batchId;
        #    Qty                 qty;
        #    UnitId              bcsUnitId;
        #    // <_0363_BcsPickingRoute> 17.10.2016 PS
        #    WmsPalletId         pickingPalletId;
        #    WmsPalletTypeId     pickingPalletTypeId;
        #    // </_0363_BcsPickingRoute>
        #
        #    // Additional parameters
        #    WmsPalletId         pickPalletId;
        #    InventLocationId    outboundInventLocationId;
        #    WmsLocationId       outboundWmsLocationId;
        #    boolean             isQtySpecified;
        #
        #    // Internal
        #    InventDim           inventDimNew;
        #    WmsPickingRoute     wmsPickingRoute;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    //return 'SF30.1';
        #    return 'SF30.1.A';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    // PickingListPicking(
        #    // string TerminlId, DateTime excecDateTime,
        #    // string PickingListId, string InventTransId, string ItemId, string ConfigID, string WarehouseId, string LocationId, string PalletId, string BatchId, double Quantity);
        #
        #    [pickingRouteID,
        #     inventTransId,
        #     itemId,
        #     configId,
        #     warehouseId,
        #     locationId,
        #     palletId,
        #     batchId,
        #     qty,
        #     bcsUnitId,
        #     // <_0363_BcsPickingRoute> 17.10.2016 PS
        #     pickingPalletId,
        #     pickingPalletTypeId
        #     // </_0363_BcsPickingRoute>
        #        ] = this.funcParamCon();
        #
        #    // <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 7));
        #    // </_DRY_0078_BCSGS1Code128AIHandling>
        #
        #    isQtySpecified = qty != 0;
        #
        #    // Get warehouse/location from scanned location
        #    [warehouseId, locationId] = BCSBase::wmsWhLocSplit(conPeek(this.funcParamCon(), 6), warehouseId);
        #
        #    if (!warehouseId)
        #    {
        #        wmsPickingRoute = WmsPickingRoute::find(pickingRouteId);
        #
        #        if (wmsPickingRoute &&
        #            wmsPickingRoute.transType == InventTransType::TransferOrderShip)
        #        {
        #            warehouseId = InventTransferTable::find(wmsPickingRoute.transRefId).InventLocationIdFrom;
        #        }
        #    }
        #
        #    // Batch Id may be a composed GS1 barcode
        #    [itemId, palletId, batchId, qty] = this.decodeEAN128Barcode(conPeek(this.funcParamCon(), 8), itemId, palletId, batchId, qty);
        #}
        #
      ENDSOURCE
      SOURCE #isEntirePalletPicking
        #// Pick the entire pallet
        #private boolean isEntirePalletPicking()
        #{;
        #    return palletId && !itemId && !batchId && !qty;
        #}
      ENDSOURCE
      SOURCE #palletId
        #// <_0340_BcsLogPalletId> 19.6.2016 PESE
        #protected WMSPalletId palletId()
        #{;
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #pickItem
        #private void pickItem()
        #{
        #    WmsOrderTrans   wmsOrderTrans;
        #    InventDim       inventDim;
        #    InventDim       inventDimCriteria;
        #    InventDimParm   inventDimParm;
        #    int             iteration;
        #    Qty             qtyRemaining;
        #    boolean         searchIteration;
        #    boolean         wmsOrderTransFound;
        #    ;
        #
        #    qtyRemaining = qty;
        #
        #    inventDimNew = InventDim::findOrCreate(inventDimNew);
        #
        #    inventDimCriteria.data(inventDimNew);
        #    inventDimParm.initFromInventDim(inventDimCriteria);
        #
        #    // TODO RN: I'm not sure the solution provided by AS (see TODO::AS) is correct ... perhaps we should apply the same as we did in method BcsInventPick.pickItem ...
        #    /*
        #    // Clear flags for RU specific dimensions.
        #    inventDimParm.InventGTDIdFlag_RU        = NoYes::No;
        #    inventDimParm.InventProfileIdFlag_RU    = NoYes::No;
        #    inventDimParm.InventOwnerIdFlag_RU      = NoYes::No;
        #    */
        #
        #    //TODO::AS
        #    //<OLD>
        #    //while (qtyRemaining > 0 && iteration < 4)
        #    //</OLD>
        #    while (qtyRemaining > 0 && iteration <= 4)
        #    //TODO::AS
        #    {
        #        // Actually the loop is not necessary because if wmsOrderTrans.Qty is less the qty then the wmsOrderTrans.Qty is increased to qty.
        #        while (qtyRemaining > 0)
        #        {
        #            select forUpdate wmsOrderTrans
        #                where   wmsOrderTrans.fullPallet        == NoYes::No    &&
        #                        wmsOrderTrans.routeId           == wmsPickingRoute.pickingRouteID   &&
        #                        wmsOrderTrans.itemId            == itemId   &&
        #                        wmsOrderTrans.expeditionStatus  == WMSExpeditionStatus::Activated // TODO: or Started?
        #                #InventDimJoin(wmsOrderTrans.InventDimId, inventDim, inventDimCriteria, inventDimParm);
        #
        #            if (wmsOrderTrans)
        #            {
        #                wmsOrderTransFound = true;
        #
        #                // This is the same code as in the Form WMSPickingRegistration, DS WMSOrderTrans.write() method.
        #                // This is to ensure the same behaviour as on the form when updated manually by user.
        #                wmsOrderTrans.checkFinishPickingLine(inventDimNew, qtyRemaining);
        #
        #                // Increase quantity to requested quantity, otherwise reservation fails.
        #                if (wmsOrderTrans.qty < qtyRemaining)
        #                {
        #                    wmsOrderTrans.qty = decround(qtyRemaining, Unit::decimals(wmsOrderTrans.unitId()));
        #                    wmsOrderTrans.wmsOrderTransType().updateQty();
        #                }
        #
        #                // Finish pickingLine
        #                wmsOrderTrans.finishPickingLine(pickPalletId, wmsOrderTrans.inventDim(), emplId, timeNow());
        #
        #                // Cancell remaining qty if requested qty was picked.
        #                this.checkRequestedQtyPicked(wmsOrderTrans.wmsOrder());
        #
        #                qtyRemaining = qtyRemaining - wmsOrderTrans.Qty;
        #
        #                if (qtyRemaining == 0)
        #                {
        #                    break;
        #                }
        #            }
        #            else
        #            {
        #                break;
        #            }
        #        }
        #
        #        searchIteration = qtyRemaining > 0;
        #
        #        while (searchIteration)
        #        {
        #            switch (iteration)
        #            {
        #                case 0:
        #                    if (inventDimCriteria.wMSPalletId)
        #                    {
        #                        inventDimParm.WMSPalletIdFlag = NoYes::No;
        #                        searchIteration = false;
        #                    }
        #                    break;
        #
        #                case 1:
        #                    if (inventDimCriteria.inventBatchId)
        #                    {
        #                        inventDimParm.InventBatchIdFlag = NoYes::No;
        #                        searchIteration = false;
        #                    }
        #                    break;
        #
        #                case 2:
        #                    if (inventDimCriteria.WMSLocationId)
        #                    {
        #                        inventDimParm.WmsLocationIdFlag = NoYes::No;
        #                        searchIteration = false;
        #                    }
        #                    break;
        #
        #                //TODO:: AS add inventGTDID_RU
        #                case 3:
        #                    if (inventDimCriteria.InventGtdId_RU)
        #                    {
        #                        inventDimParm.InventGTDIdFlag_RU = NoYes::No;
        #                        searchIteration = false;
        #                    }
        #                    break;
        #                //TODO:: AS add inventGTDID_RU
        #                default:
        #                    searchIteration = false;
        #            }
        #
        #            iteration++;
        #        }
        #    }
        #
        #    if (qtyRemaining > 0 && !wmsOrderTransFound)
        #    {
        #        // TODO: Create WmsOrderTrans for specific item
        #    }
        #
        #    if (qtyRemaining > 0)
        #    {
        #        throw error("@ADR504");
        #    }
        #}
      ENDSOURCE
      SOURCE #pickPallet
        #// Pick the entire pallet
        #private void pickPallet()
        #{
        #    WmsPallet               wmsPallet;
        #    InventDimOnHand         inventDimOnHand;
        #    SetEnumerator           se;
        #    InventDimOnHandMember   inventDimOnHandMember;
        #    boolean                 isPalletPicked;
        #    ;
        #
        #    wmsPallet   = WmsPallet::find(palletId);
        #
        #    if (!wmsPallet)
        #    {
        #        throw error(strFmt("@SYS50578", palletId));
        #    }
        #
        #    //inventDimOnHand         = wmsPallet.onHandAvailableDetailed();
        #    inventDimOnHand         = wmsPallet.onHandDetailed();
        #    se                      = inventDimOnHand.getEnumerator();
        #
        #    while (se.moveNext())
        #    {
        #        inventDimOnHandMember   = se.current();
        #
        #        itemId                  = inventDimOnHandMember.parmItemId();
        #        inventDimNew            = InventDim::find(inventDimOnHandMember.parmInventDimId());
        #        qty                     = inventDimOnHandMember.parmInventQty();
        #
        #        this.pickItem();
        #
        #        isPalletPicked = true;
        #    }
        #
        #    if (!isPalletPicked)
        #    {
        #        throw error(strFmt("@ADR510", palletId));
        #    }
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    SysDictLicenseCode  sysDictLicenseCode;
        #    ;
        #
        #    wmsPickingRoute = WmsPickingRoute::find(pickingRouteID);
        #    if (!wmsPickingRoute)
        #    {
        #        throw error(strFmt("@SYS51116", pickingRouteID));
        #    }
        #
        #    if (qty < 0)
        #    {
        #        this.unPickItem();
        #    }
        #    else
        #    {
        #        // <_0363_BcsPickingRoute> 17.10.2016 PS
        #        this.setPickingPallet(pickingPalletId);
        #        // </_0363_BcsPickingRoute>
        #
        #        if (this.isEntirePalletPicking())
        #        {
        #            this.pickPallet();
        #        }
        #        else
        #        {
        #            this.pickItem();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #resolveSplitTrans
        #private void resolveSplitTrans(WmsOrderTrans _wmsOrderTrans, Qty _qty)
        #{
        #    WmsOrderTransType   wmsOrderTransType;
        #    ;
        #
        #    // Set the quantity back to origin value
        #    _wmsOrderTrans.qty  += _qty;
        #    wmsOrderTransType   = _wmsOrderTrans.wmsOrderTransType();
        #    wmsOrderTransType.updateQty();
        #    _wmsOrderTrans.update();
        #}
      ENDSOURCE
      SOURCE #setPickingPallet
        #// <_0363_BcsPickingRoute> 17.10.2016 PS
        #// Copied and adopted from form WMSPickForm > control SelectPickPallet > method modified
        #private void setPickingPallet(WmsPalletId _pickingPalletId)
        #{
        #    WmsPallet       pickingPallet;
        #    ;
        #
        #    // TODO: Force picking pallet mandatory?
        #
        #    if (_pickingPalletId)
        #    {
        #        pickingPallet = WMSPallet::find(_pickingPalletId);
        #
        #        if (pickingPallet)
        #        {
        #            if (!wmsPickingRoute.possiblePickPallet(pickingPallet))
        #            {
        #                throw error("@SYS50461");
        #            }
        #        }
        #        else
        #        {
        #            wmsPickingRoute.CurrentPickPalletId = WMSPickPalletNew::createPickPallet(pickingPalletId, pickingPalletTypeId, wmsPickingRoute.ShipmentId);
        #
        #            pickingPallet = WMSPallet::find(wmsPickingRoute.CurrentPickPalletId, true);
        #
        #            if (pickingPallet && !wmsPickingRoute.possiblePickPallet(pickingPallet))
        #            {
        #                throw error("@SYS50461");
        #            }
        #
        #            if (!wmsPickingRoute.CurrentPickPalletId)
        #            {
        #                throw error("@SYS50461");
        #            }
        #        }
        #
        #        wmsPickingRoute.selectPickPallet(pickingPallet.wmsPalletId);
        #    }
        #    else
        #    {
        #        wmsPickingRoute.selectPickPallet('');
        #    }
        #}
      ENDSOURCE
      SOURCE #unpickItem
        #private void unpickItem()
        #{
        #    WmsOrderTrans   wmsOrderTrans;
        #    InventDim       inventDim;
        #    InventDim       inventDimCriteria;
        #    InventDimParm   inventDimParm;
        #    Qty             qtyRemaining;
        #    ;
        #
        #    qtyRemaining = -qty;
        #
        #    inventDimNew = InventDim::findOrCreate(inventDimNew);
        #
        #    inventDimCriteria.data(inventDimNew);
        #    inventDimParm.initFromInventDim(inventDimCriteria);
        #
        #    while (qtyRemaining > 0)
        #    {
        #        select forUpdate wmsOrderTrans
        #            where   wmsOrderTrans.fullPallet        == NoYes::No    &&
        #                    wmsOrderTrans.routeId           == wmsPickingRoute.pickingRouteID   &&
        #                    wmsOrderTrans.itemId            == itemId   &&
        #                    wmsOrderTrans.expeditionStatus  == WMSExpeditionStatus::Picked
        #            #InventDimJoin(wmsOrderTrans.InventDimId, inventDim, inventDimCriteria, inventDimParm);
        #
        #        if (wmsOrderTrans)
        #        {
        #            // Split transaction to desired quantity
        #            if (wmsOrderTrans.qty > qtyRemaining)
        #            {
        #                wmsOrderTrans.split(decround(wmsOrderTrans.qty - qtyRemaining, Unit::decimals(wmsOrderTrans.unitId())));
        #            }
        #
        #            wmsOrderTrans.wmsOrderTransType().unPick(wmsOrderTrans.qty, wmsOrderTrans.inventDim(), false);
        #
        #            qtyRemaining = qtyRemaining - wmsOrderTrans.Qty;
        #
        #            if (qtyRemaining == 0)
        #            {
        #                break;
        #            }
        #        }
        #        else
        #        {
        #            break;
        #        }
        #    }
        #
        #    if (qtyRemaining > 0)
        #    {
        #        throw error("@ADR526");
        #    }
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean         ok = super();
        #    InventDimSetup  inventDimSetup;
        #    BcsInventDim    bcsInventDim;
        #    InventDim       inventDim;
        #    ;
        #
        #    wmsPickingRoute = WmsPickingRoute::find(pickingRouteID);
        #    if (!wmsPickingRoute)
        #    {
        #        ok = checkFailed(strFmt("@SYS51116", pickingRouteID));
        #    }
        #    else
        #    {
        #        if (wmsPickingRoute.expeditionStatus >= WmsExpeditionStatus::Complete)
        #        {
        #            ok = checkFailed(strFmt("@ADR527", wmsPickingRoute.expeditionStatus));
        #        }
        #    }
        #
        #    inventDim.configId          = configId;
        #    inventDim.InventLocationId  = warehouseId;
        #    inventDim.wMSLocationId     = locationId;
        #    inventDim.inventBatchId     = batchId;
        #    inventDim.wMSPalletId       = palletId;
        #
        #    if (this.isEntirePalletPicking())
        #    {
        #        if (!WmsPallet::exist(palletId))
        #        {
        #            ok = checkFailed(strFmt("@SYS60578", palletId));
        #        }
        #
        #        inventDimNew.data(inventDim);
        #    }
        #    else
        #    {
        #        bcsInventDim = new BcsInventDim(itemId, inventDim, qty);
        #        ok = bcsInventDim.checkUpdateInventDimensions() && ok;
        #
        #        if (ok)
        #        {
        #            inventDimNew.data(bcsInventDim.inventDim());
        #
        #            if (!qty)
        #            {
        #                qty = bcsInventDim.qty();
        #            }
        #        }
        #    }
        #
        #    if (isQtySpecified)
        #    {
        #        // Convert quantity only if the qty was specified (and was not defaulted).
        #        // If the quantity was defaulted then it is considered in inventory unit.
        #        qty = BCSBase::convertQty(itemId, qty, bcsUnitId);
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSProdRegisterPallet выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSProdRegisterPallet
    Id 50116
    PROPERTIES
      Name                #BCSProdRegisterPallet
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class BCSProdRegisterPallet extends BCSBase
        #{
        #    // Parameters
        #    ProdId              prodId;
        #    WmsPalletId         palletId;
        #    Qty                 qty;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF4.1';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    [prodId,
        #     palletId,
        #     qty] = this.funcParamCon();
        #
        #    // <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 2));
        #    // </_DRY_0078_BCSGS1Code128AIHandling>
        #}
      ENDSOURCE
      SOURCE #palletId
        #protected WMSPalletId palletId()
        #{
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #postJournal
        #private void postJournal(JournalId _journalId)
        #{
        #    JournalCheckPost journalCheckPost;
        #    ;
        #
        #    journalCheckPost = WMSJournalCheckPostReception::newTypeJournalTable(JournalCheckPostType::Post, WMSJournalTable::find(_journalId));
        #
        #    journalCheckPost.parmAutoBlock(true);
        #    // <_0313_DCZ_ProdPickRegisterCheck> 30.3.2016 ZN
        #    journalCheckPost.parmThrowCheckFailed(true);
        #    // </_0313_DCZ_ProdPickRegisterCheck>
        #    journalCheckPost.run();
        #}
      ENDSOURCE
      SOURCE #postProcess
        #protected void postProcess()
        #{;
        #    super();
        #
        #    if (palletId)
        #    {
        #        this.printPalletLabel(palletId);
        #    }
        #}
      ENDSOURCE
      SOURCE #printPalletLabel
        #// <_0266_DRY_LabelsForSystemeU> 3.11.2015 RN
        #// Pallet label printing for pallet registration from productin is handled specifically.
        #// </_0266_DRY_LabelsForSystemeU>
        #protected void printPalletLabel(WMSPalletId _palletId)
        #{
        #    //super(_palletId);
        #
        #    Args                            args;
        #    SysReportRun                    rr;
        #    RunbaseReportStd                rbr;
        #    TerminalTable                   terminalTable;
        #    FileName                        fileName;
        #    FilePath                        filePath;
        #    FileName                        fileExt;
        #    PrintJobSettings                printJobSettings;
        #    WMSPalletNumberDispatcher_W     wmsPalletNumberDispatcher_W;
        #    ReportFormat_W                  reportFormat;
        #    WmsPalletLabelDispatcherTable   wmsPalletLabelDispatcherTable;
        #    WmsPalletLabelDispatcher        wmsPalletLabelDispatcher;
        #    WmsPalletLabelFormat            palletLabelFormat;
        #    PrintJobSettingsPacked          printJobSettingsPacked;
        #    BcsTerminalPalletLabelSettings  bcsTerminalPalletLabelSettings;
        #    ;
        #
        #    terminalTable = TerminalTable::find(terminalId);
        #    args = new Args();
        #
        #    wmsPalletLabelDispatcherTable = WmsPalletLabelDispatcherTable::find(ProdTable::find(prodId).inventTable().TrademarkId);
        #    if (wmsPalletLabelDispatcherTable)
        #    {
        #        palletLabelFormat = wmsPalletLabelDispatcherTable.Format;
        #        wmsPalletLabelDispatcher = WmsPalletLabelDispatcher::construct(palletLabelFormat);
        #        args.name(wmsPalletLabelDispatcher.getReportName());
        #
        #        bcsTerminalPalletLabelSettings = BcsTerminalPalletLabelSettings::find(palletLabelFormat);
        #
        #        if (!bcsTerminalPalletLabelSettings)
        #        {
        #            throw error(strFmt("@ADR525",tableid2pname(tableNum(BcsTerminalPalletLabelSettings)),palletLabelFormat));
        #        }
        #        else if (!bcsTerminalPalletLabelSettings.PrinterSettings)
        #        {
        #            throw error(strFmt("@ADR463", palletLabelFormat));
        #        }
        #
        #        printJobSettingsPacked = bcsTerminalPalletLabelSettings.PrinterSettings;
        #    }
        #    else
        #    {
        #        reportFormat    = terminalTable.ReportFormat;
        #        wmsPalletNumberDispatcher_W = WMSPalletNumberDispatcher_W::construct(reportFormat);
        #        args.name(wmsPalletNumberDispatcher_W.getReportName());
        #
        #        printJobSettingsPacked = terminalTable.PalletLabelPrinterSettings;
        #
        #        if (!printJobSettingsPacked)
        #        {
        #            throw error(strFmt("@DRC87", terminalId, reportFormat));
        #        }
        #    }
        #
        #    args.caller(this);
        #    args.record(WMSPallet::find(_palletId));
        #    rr = new SysReportRun(args);
        #    rr.init();
        #    rbr = new RunbaseReportStd();
        #    rbr.initReportRun(rr);
        #    rbr.unpack(printJobSettingsPacked);
        #
        #    if (rbr.printJobSettings().getTarget() == PrintMedium::File)
        #    {
        #        // RN: Create unique file name
        #        fileName    = rbr.printJobSettings().fileName();
        #        [filePath, fileName, fileExt] = global::fileNameSplit(fileName);
        #        fileName    = terminalTable.PalletLabelFileName ? terminalTable.PalletLabelFileName : fileName;
        #        fileName    = filePath + fileName + strFmt("_%1_%2%3", _palletId, date2Str(today(),321,2,0,2,0,2), strKeep(time2str(timeNow(),3,3),"0123456789")) + fileExt;
        #        rbr.printJobSettings().fileName(fileName);
        #    }
        #
        #    global::findOrCreateRange_W(rbr.queryRun().query().dataSourceTable(tableNum(WMSPallet)), fieldNum(WMSPallet, WmspalletId), SysQuery::value(_palletId));
        #
        #    rbr.run();
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    ProdTable                   prodTable;
        #    WMSStandardPalletQuantity   standardPalletQty;
        #    WMSJOurnalTable             wmsJournalTable;
        #    //WmsJournalTableData         data = JournalTableData::newTable(wmsJournalTable);
        #    WMSJournalTrans             journalTrans;
        #    InventDim                   inventDim;
        #    ;
        #
        #    prodTable   = ProdTable::find(prodId);
        #
        #    if (!prodTable)
        #    {
        #        throw error(strFmt("@SYS12725", prodId));
        #    }
        #
        #    if (prodTable.ProdStatus == ProdStatus::Completed)
        #    {
        #        throw error(strFmt("@SYS22041", prodTable.ProdStatus));
        #    }
        #
        #    if (palletId && !WMSPallet::exist(palletId))
        #    {
        #        throw error(strFmt("@SYS60578", palletId));
        #    }
        #
        #    if (!ProdParametersDim::findDefault().WMSJournalNameIdReception)
        #    {
        #        throw error("@ADR294");
        #    }
        #
        #    // <_DRY_0044_RegistedPalletQty> 17.3.2014 RN
        #    standardPalletQty  = prodTable.inventTable().standardPalletQuantity;
        #    if (qty > standardPalletQty)
        #    {
        #        throw error(strFmt("@SYS57210", standardPalletQty, qty));
        #    }
        #    // </_DRY_0044_RegistedPalletQty>
        #
        #    wmsJournalTable.initFromWMSJournalName(WMSJOurnalName::find(ProdParametersDim::findDefault().WMSJournalNameIdReception));
        #    wmsJournalTable.inventDimId = InventDim::inventDimIdBlank();
        #    wmsJournalTable.initFromMovement(InventMovement::construct(prodTable), prodTable.inventDim());
        #    wmsJournalTable.numOfLines = 1;
        #    wmsJournalTable.insert();
        #
        #    journalTrans.initFromWMSJournalTable(wmsJournalTable, true);
        #
        #    // <_DRY_0044_RegistedPalletQty> 17.3.2014 RN
        #    // <OLD>
        #    //journalTrans.qty = qty != 0 ? qty : prodTable.inventTable().standardPalletQuantity;
        #    // </OLD>
        #    journalTrans.qty = qty != 0 ? qty : standardPalletQty;
        #    // </_DRY_0044_RegistedPalletQty>
        #
        #    if (palletId == '')
        #    {
        #        palletId = WMSPalletIdGenerate::nextPalletId();
        #    }
        #
        #    inventDim = journalTrans.inventDim();
        #    inventDim.wMSPalletId = palletId;
        #
        #    inventDim.inventBatchId = '';
        #    inventDim = InventDim::findOrCreate(inventDim);
        #
        #    journalTrans.inventDimId = inventDim.inventDimId;
        #    journalTrans.insert();
        #
        #    this.postJournal(wmsJournalTable.journalId);
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean         ok = super();
        #    ;
        #
        #    if (!prodId)
        #    {
        #        ok = checkFailed("@SYS26122");
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSLogin выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSLogin
    Id 50213
    PROPERTIES
      Name                #BCSLogin
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// <_0259_BCS_2015> 13.11.2015 RN
        #class BCSLogin extends BCSBase
        #{
        #    // Parameters
        #    WmsPalletId         palletId;
        #    InventLocationId    warehouseId;
        #    WmsLocationId       wmsLocationId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'Login';
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    DictEnum            dictEnum;
        #    int                 i;
        #    str                 value;
        #    boolean             first;
        #    BcsFunctionAccess   access;
        #    int                 funcIdInt;
        #    int                 accessInt;
        #    ;
        #
        #    dictEnum = new DictEnum(enumnum(InventBarcodeReaderInterfaceFunction));
        #
        #    this.addRetValueCon(curExt()); // DataAreaId in order to know which company logo to show up in the mobile device application
        #
        #    first = true;
        #
        #    for (i = 0; i <= dictEnum.values(); i++)
        #    {
        #        funcIdInt   = dictEnum.index2Value(i);
        #        access = BcsEmplAccess::access(emplId,funcIdInt);
        #        accessInt   = access;
        #
        #        value += (first ? '' : ';') + strFmt("%1;%2",funcIdInt,accessInt);
        #        first = false;
        #    }
        #
        #    this.addRetValueCon(value);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSInventRegister выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSInventRegister
    Id 50044
    PROPERTIES
      Name                #BCSInventRegister
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #public class BCSInventRegister extends BCSBase
        #{
        #    // Parameters
        #    InventTransType     transType;
        #    InventTransRefId    transRefId;
        #    ItemId              itemId;
        #    ConfigId            configId;
        #    InventLocationId    warehouseId;
        #    WmsLocationId       locationId;
        #    WmsPalletId         palletId;
        #    InventBatchId       batchId;
        #    Qty                 qty;
        #    UnitId              bcsUnitId;
        #
        #    // Internal
        #    InventDim           inventDimNew;
        #    boolean             isQtySpecified;
        #
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF30.1';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    // RegisterInventory(
        #    // string TerminlId, DateTime excecDateTime,
        #    // string InventRefType, string InventRefId, string ItemId, string ConfigID, string WarehouseId, string LocationId, string PalletId, string BatchId, double Quantity);
        #
        #    [transType,
        #     transRefId,
        #     itemId,
        #     configId,
        #     warehouseId,
        #     locationId,
        #     palletId,
        #     batchId,
        #     qty,
        #     bcsUnitId] = this.funcParamCon();
        #
        #    // <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 7));
        #    // </_DRY_0078_BCSGS1Code128AIHandling>
        #
        #    isQtySpecified = qty != 0;
        #
        #    // ATTENTION! transType == 0 -> InventTransType::Sales
        #    if (!transType)
        #    {
        #        transType = InventTransType::TransferOrderReceive;
        #    }
        #
        #    // Get warehouse/location from scanned location
        #    [warehouseId, locationId] = BCSBase::wmsWhLocSplit(conPeek(this.funcParamCon(), 6), warehouseId);
        #
        #    if (!warehouseId &&
        #        transType == InventTransType::TransferOrderReceive)
        #    {
        #        warehouseId = InventTransferTable::find(transRefId).InventLocationIdTo;
        #    }
        #
        #    // Batch Id may be a composed GS1 barcode
        #    [itemId, palletId, batchId, qty] = this.decodeEAN128Barcode(conPeek(this.funcParamCon(), 8), itemId, palletId, batchId, qty);
        #}
      ENDSOURCE
      SOURCE #palletId
        #// <_0340_BcsLogPalletId> 19.6.2016 PESE
        #protected WMSPalletId palletId()
        #{;
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{;
        #    if (qty >= 0)
        #    {
        #        this.updateRegisterMore();
        #    }
        #    else
        #    {
        #        this.updateRegisterLess();
        #    }
        #}
      ENDSOURCE
      SOURCE #updateRegisterLess
        #protected void updateRegisterLess()
        #{;
        #    throw error("@ADR519");
        #}
      ENDSOURCE
      SOURCE #updateRegisterMore
        #protected void updateRegisterMore()
        #{
        #    Common              common;
        #    InventTrans         inventTrans;
        #    TmpInventTransWMS   tmpInventTransWMS;
        #    InventTransferLine  inventTransferLine;
        #    Qty                 qtyRemaining;
        #    Qty                 qtyRegister;
        #    InventDim           inventDim;
        #    ;
        #
        #    qtyRemaining = qty;
        #
        #    while select inventTrans
        #        order by StatusReceipt // First updated transactions with status arrived, then ordered
        #        where   inventTrans.TransType       == transType                &&
        #                inventTrans.TransRefId      == transRefId               &&
        #                inventTrans.ItemId          == itemId                   &&
        #                inventTrans.StatusIssue     == StatusIssue::None        &&
        #                inventTrans.StatusReceipt   >= StatusReceipt::Arrived
        #    {
        #        inventDim = inventTrans.inventDim();
        #
        #        if (inventDim.InventLocationId != inventDimNew.InventLocationId)
        #        {
        #            throw error(strFmt("@ADR520", inventDim.InventLocationId, inventDimNew.InventLocationId));
        #        }
        #
        #        inventDim.wMSLocationId = inventDimNew.WmslocationId;
        #        inventDim.wMSPalletId   = inventDimNew.WmsPalletId;
        #        inventDim.inventBatchId = inventDimNew.inventBatchId;
        #        inventDim   = InventDim::findOrCreate(inventDim);
        #
        #        tmpInventTransWms.LineNum   = 1;
        #        tmpInventTransWms.initFromInventTrans(inventTrans);
        #        qtyRegister = min(qtyRemaining, inventTrans.Qty);
        #        tmpInventTransWms.InventQty     = qtyRegister;
        #        tmpInventTransWms.InventDimId   = inventDim.inventDimId;
        #        tmpInventTransWms.insert();
        #
        #        switch (transType)
        #        {
        #            case InventTransType::TransferOrderReceive:
        #                common = inventTrans.inventTransferLine();
        #                break;
        #
        #            default: throw error(strFmt("@ADR521", transType));
        #        }
        #
        #        if (InventTransWMS_Register::updateInvent(common, tmpInventTransWMS))
        #        {
        #            qtyRemaining = qtyRemaining - qtyRegister;
        #        }
        #
        #        if (qtyRemaining <= 0)
        #        {
        #            break;
        #        }
        #    }
        #
        #    if (qtyRemaining > 0)
        #    {
        #        throw error("@ADR528");
        #    }
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean         ok = super();
        #    BcsInventDim    bcsInventDim;
        #    InventDim       inventDimLocal;
        #    ;
        #
        #    if (!transRefId)
        #    {
        #        ok = checkFailed("@SYS24743");
        #    }
        #    else
        #    {
        #        switch (transType)
        #        {
        #            case InventTransType::TransferOrderReceive:
        #                if (!InventTransferTable::exist(transRefId))
        #                {
        #                    ok = checkFailed(strFmt("@SYS78332", transRefId));
        #                }
        #                break;
        #
        #            default: ok = checkFailed("@ADR187");
        #        }
        #    }
        #
        #    inventDimLocal.configId          = configId;
        #    inventDimLocal.InventLocationId  = warehouseId;
        #    inventDimLocal.wMSLocationId     = locationId;
        #    inventDimLocal.inventBatchId     = batchId;
        #    inventDimLocal.wMSPalletId       = palletId;
        #
        #    bcsInventDim = new BcsInventDim(itemId, inventDimLocal, qty);
        #    ok = bcsInventDim.checkUpdateInventDimensions() && ok;
        #
        #    if (ok)
        #    {
        #        inventDimNew.data(bcsInventDim.inventDim());
        #
        #        if (!qty)
        #        {
        #            qty = bcsInventDim.qty();
        #        }
        #    }
        #
        #    if (isQtySpecified)
        #    {
        #        // Convert quantity only if the qty was specified (and was not defaulted).
        #        // If the quantity was defaulted then it is considered in inventory unit.
        #        qty = BCSBase::convertQty(itemId, qty, bcsUnitId);
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSInventPickRefTransferOrder выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSInventPickRefTransferOrder
    Id 50096
    PROPERTIES
      Name                #BCSInventPickRefTransferOrder
      Extends             #BCSInventPickRef
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #adHocPicking
        #// <_0261_CrossCheck> 21.6.2016 PESE
        #BcsAdhocPicking adHocPicking()
        #{;
        #    return InventParameters::find().BcsAdhocPickingTransferOrder;
        #}
      ENDSOURCE
      SOURCE #canCreateLine
        #protected boolean canCreateLine()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class BCSInventPickRefTransferOrder extends BCSInventPickRef
        #{
        #    InventTransferTable inventTransferTable;
        #    InventTransferLine  inventTransferLine;
        #}
      ENDSOURCE
      SOURCE #createLine
        #protected boolean createLine(InventQty _qty)
        #{
        #    boolean ret;
        #    ;
        #
        #    inventTransferLine.clear();
        #    inventTransferLine.ItemId       = itemId;
        #
        #    // table InventTransferLine.modifiedField() / ItemId
        #    inventTransferLine.initFromInventTable(InventTable::find(itemId));
        #    inventTransferLine.initFromInventTransferTable(this.orderTable(), true);
        #    SalesCalcAvailableDlvDates::initDateFields(inventTransferLine);
        #    inventTransferLine.QtyTransfer  = decround(_qty,Unit::decimals(inventTransferLine.UnitId));
        #    //InventMovement::setMinMaxQty(inventTransferLine);
        #
        #    // <GEEU>
        #    inventTransferLine.setPrice_RU();
        #    inventTransferLine.LineAmount_RU = inventTransferLine.calcLineAmount_RU();
        #    // </GEEU>
        #
        #    // form InventTransferOrders, datasource InventTransferLine_DS.write()
        #    //InventMovement::setAutoReserving(inventTransferLine);
        #    InventMovement::bufferSetRemainQty(inventTransferLine,InventMovSubType::None);
        #    InventMovement::bufferSetRemainQty(inventTransferLine,InventMovSubType::TransferOrderTransitFrom);
        #
        #    inventTransferLine.LineNum  = InventTransferLine::lastLineNum(inventTransferLine.TransferId) + 1;
        #    inventTransferLine.BcsAutoCreatedByBcsPicking = NoYes::Yes;
        #
        #    if (inventTransferLine.validateWrite())
        #    {
        #        inventTransferLine.insert();
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #defaultInventLocationId
        #InventLocationId defaultInventLocationId()
        #{;
        #    this.orderTable();
        #    return inventTransferTable.InventLocationIdFrom;
        #}
      ENDSOURCE
      SOURCE #findLine
        #// <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #// <OLD>
        #//protected void findLine()
        #// </OLD>
        #protected void findLine(boolean _exclBcsAutoCreated = false)
        #// </_0094_DRY_BcsPickingCrossCheckConfirm>
        #{
        #    InventDim   inventDim;
        #    ;
        #
        #    select firstOnly inventTransferLine
        #        where   inventTransferLine.TransferId   == refId    &&
        #                inventTransferLine.ItemId       == itemId
        #        join    inventDim
        #        where   inventDim.inventDimId           == inventTransferLine.InventDimId   &&
        #                inventDim.configId              == inventDimItem.configId           &&
        #                inventDim.InventColorId         == inventDimItem.InventColorId      &&
        #                inventDim.InventSizeId          == inventDimItem.InventSizeId;
        #}
      ENDSOURCE
      SOURCE #findLineInventTrans
        #public Common findLineInventTrans(InventTrans _inventTrans)
        #{;
        #    return _inventTrans.inventTransferLine();
        #}
      ENDSOURCE
      SOURCE #increaseLineQty
        #protected boolean increaseLineQty(InventQty _qty)
        #{
        #    boolean ok;
        #    ;
        #
        #    if (inventTransferLine)
        #    {
        #        inventTransferLine.selectForUpdate(true);
        #        inventTransferLine.QtyTransfer += _qty;
        #        inventTransferLine.setPrice_RU();
        #        inventTransferLine.LineAmount_RU = inventTransferLine.calcLineAmount_RU();
        #        InventMovement::bufferSetRemainQty(inventTransferLine,InventMovSubType::None);
        #        InventMovement::bufferSetRemainQty(inventTransferLine,InventMovSubType::TransferOrderTransitFrom);
        #        inventTransferLine.update();
        #        ok = true;
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #isCrosscheckConfirmationRequired
        #// <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #public boolean isCrosscheckConfirmationRequired(ItemId _itemId, InventDim _inventDim)
        #{;
        #    // <_0261_CrossCheck> 21.6.2016 PESE
        #    // <OLD>
        #    //return false;
        #    // </OLD>
        #    return super(_itemId, _inventDim);
        #    // </_0261_CrossCheck>
        #}
      ENDSOURCE
      SOURCE #new
        #//protected void new(InventTransRefId _refId, ItemId _itemId, InventDim _inventDim)
        #public void new(
        #    InventTransRefId    _refId)
        #    //ItemId              _itemId,
        #    //InventDim           _inventDim)
        #{;
        #    //super(_refId, _itemId, _inventDim);
        #    super(_refId);
        #
        #    orderTable  = inventTransferTable;
        #    orderLine   = inventTransferLine;
        #}
      ENDSOURCE
      SOURCE #orderTable
        #protected Common orderTable()
        #{;
        #    if (!inventTransferTable)
        #    {
        #        inventTransferTable = InventTransferTable::find(refId);
        #    }
        #
        #    return inventTransferTable;
        #}
      ENDSOURCE
      SOURCE #totalItemPickedQty
        #public container totalItemPickedQty(ItemId _itemId, InventDim _inventDim = InventDim::find(InventDim::inventDimIdBlank()))
        #{
        #    InventTransferLine  inventTransferLineLocal;
        #    InventDim   inventDim;
        #    Qty         totalQty;
        #    Qty         qty;
        #    UnitId      unitId;
        #    UnitId      inventUnitId;
        #    boolean     firstLine = true;
        #    ;
        #
        #    while select inventTransferLineLocal
        #        where   inventTransferLineLocal.TransferId   == refId  &&
        #                inventTransferLineLocal.ItemId       == _itemId
        #        join    inventDim
        #        where   inventDim.inventDimId   == inventTransferLineLocal.InventDimId  &&
        #                inventDim.InventColorId == _inventDim.InventColorId &&
        #                inventDim.InventSizeId  == _inventDim.InventSizeId  &&
        #                inventDim.configId      == _inventDim.configId
        #    {
        #        qty = this.inventTransPickedQty(inventTransferLineLocal.InventTransId);
        #
        #        if (firstLine)
        #        {
        #            inventUnitId    = InventTable::find(inventTransferLineLocal.ItemId).inventUnitId();
        #            unitId          = inventTransferLineLocal.UnitId; // this is the picking unit
        #            firstLine       = false;
        #        }
        #
        #        if (inventUnitId != inventTransferLineLocal.UnitId)
        #        {
        #            qty = UnitConvert::qty(qty, inventUnitId, unitId, _itemId);
        #        }
        #
        #        totalQty += qty;
        #    }
        #
        #    return [totalQty,unitId];
        #}
      ENDSOURCE
      SOURCE #totalPalletPickedQty
        #public container totalPalletPickedQty(
        #    WmsPalletId _palletId,
        #    ItemId      _itemId,
        #    InventDim   _inventDim = InventDim::find(InventDim::inventDimIdBlank()))
        #{
        #    InventTransferLine  inventTransferLineLocal;
        #    InventTrans inventTrans;
        #    InventDim   inventDim;
        #    InventDim   inventDimTrans;
        #    Qty         totalQty;
        #    Qty         qty;
        #    UnitId      unitId;
        #    UnitId      inventUnitId;
        #    boolean     firstLine = true;
        #    ItemId      itemIdOld;
        #    ;
        #
        #    while select inventTransferLineLocal // ProdBom is needed to get unit
        #        where   inventTransferLineLocal.TransferId == refId  &&
        #               (!itemId || inventTransferLineLocal.ItemId  == _itemId)
        #        join    inventTrans
        #        where   inventTrans.InventTransId   == inventTransferLineLocal.InventTransId
        #        join    inventDimTrans
        #        where   inventDimTrans.inventDimId  == inventTrans.inventDimId  &&
        #                inventDimTrans.wMSPalletId  == _palletId                &&
        #                inventDimTrans.configId     == _inventDim.configId      &&
        #                inventDim.InventColorId == _inventDim.InventColorId &&
        #                inventDim.InventSizeId  == _inventDim.InventSizeId
        #    {
        #        qty = inventTrans.Qty;
        #
        #        if (firstLine)
        #        {
        #            unitId          = inventTransferLineLocal.UnitId; // this is the picking unit
        #            inventUnitId    = InventTable::find(inventTransferLineLocal.ItemId).inventUnitId();
        #            firstLine       = false;
        #        }
        #        else
        #        {
        #            // Normally there is only one item on a pallet
        #            if (inventTransferLineLocal.ItemId != itemIdOld)
        #            {
        #                inventUnitId = InventTable::find(inventTransferLineLocal.ItemId).inventUnitId();
        #            }
        #        }
        #
        #        if (qty && inventUnitId != inventTransferLineLocal.UnitId)
        #        {
        #            qty = UnitConvert::qty(qty, inventUnitId, unitId, inventTransferLineLocal.ItemId);
        #        }
        #
        #        totalQty += qty;
        #
        #        itemIdOld = inventTransferLineLocal.ItemId;
        #    }
        #
        #    if (!unitId)
        #    {
        #        select firstOnly inventTransferLineLocal
        #            join    inventTrans
        #            join    inventDimTrans
        #            where   inventTrans.ItemId                  == inventTransferLineLocal.ItemId    &&
        #                    inventDimTrans.inventDimId          == inventTrans.inventDimId  &&
        #                    inventDimTrans.wMSPalletId          == _palletId                &&
        #                    inventTransferLineLocal.TransferId  == refId;
        #
        #        unitId = inventTransferLineLocal.UnitId;
        #
        #        if (!unitId)
        #        {
        #            unitId = InventTable::find(inventTrans.ItemId).bomUnitId();
        #        }
        #    }
        #
        #    return [totalQty,unitId];
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSIssueMaterialForMaintenance выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSIssueMaterialForMaintenance
    Id 50048
    PROPERTIES
      Name                #BCSIssueMaterialForMaintenance
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #public class BcsIssueMaterialForMaintenance extends BCSBase
        #{
        #    // Parameters
        #    // string EmplId, string ItemId, string LocationId, string CostCenter, double Quantity
        #    ItemId              itemId;
        #    WmsLocationId       wmsLocationId;
        #    SysDim              costCenter;
        #    Qty                 qty;
        #
        #    //
        #    InventLocationId    inventLocationId;
        #
        #    // Internal
        #    InventJournalNameId     journalNameId;
        #    InventJournalId         journalId;
        #    InventJournalTable      journalTable;
        #    InventJournalTableData  journalTableData;
        #    InventJournalTrans      journalTrans;
        #    InventJournalTransData  journalTransData;
        #}
      ENDSOURCE
      SOURCE #createJournal
        #private void createJournal()
        #{;
        #    journalTableData = JournalTableData::newTable(journalTable);
        #
        #    journalTable.JournalId      = journalTableData.nextJournalId();
        #    journalTable.JournalNameId  = journalNameId;
        #    journalTableData.initFromJournalName(journalTableData.journalStatic().findJournalName(journalTable.JournalNameId));
        #
        #    journalTable.EmplId                 = emplId;
        #
        #    journalTable.insert();
        #
        #    journalId = journalTable.JournalId;
        #
        #    if (!journalId)
        #    {
        #        throw error("@ADR522");
        #    }
        #}
      ENDSOURCE
      SOURCE #createLine
        #private void createLine()
        #{
        #    #DimensionNums
        #    InventDim               inventDim;
        #    ;
        #
        #    journalTransData  = journalTableData.journalStatic().newJournalTransData(journalTrans,journalTableData);
        #
        #    inventDim.InventSiteId      = InventLocation::find(inventLocationId).InventSiteId;
        #    inventDim.InventLocationId  = inventLocationId;
        #    inventDim.wMSLocationId     = wmsLocationId;
        #    inventDim                   = InventDim::findOrCreate(inventDim);
        #
        #    journalTransData.initFromJournalTable();
        #    journalTrans.TransDate      = systemdateget();
        #    journalTrans.ItemId         = itemId;
        #    journalTrans.initFromInventTable(InventTable::find(itemId), false, false, false);
        #    journalTrans.Qty            = -qty;
        #    journalTrans.Dimension[#CostCenter] = costCenter;
        #
        #    // This will set inventDim (incl. update fin. dim. fron site), cost price, on-hand qty and qty
        #    journalTrans.inventMovement().journalSetInventDimField(inventDim, fieldNum(InventDim, InventSiteId));
        #
        #    //journalTrans.setInventDimId(inventDim.inventDimId); // This updates linked fin. dim. from invent site if set so
        #    //journalTrans.setCostPrice();
        #
        #    journalTrans.BCSScanned = NoYes::Yes;
        #
        #    journalTransData.create();
        #
        #    journalTable.update();
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF20.1';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{
        #    InventTable inventTable;
        #    ;
        #
        #    super();
        #
        #    // IssueMaterialForMaintenance(
        #    // string TerminlId, DateTime excecDateTime,
        #    // string EmplId, string ItemId, string LocationId, string CostCenter, double Quantity);
        #
        #    [emplId,
        #     itemId,
        #     wmsLocationId,
        #     costCenter,
        #     qty] = this.funcParamCon();
        #
        #    // Get warehouse/location from scanned location
        #    [inventLocationId, wmsLocationId] = BcsBase::wmsWhLocSplit(conPeek(this.funcParamCon(), 3));
        #
        #    // If only one value is entered and wms location is not active for selected item then consider it being warehouse
        #    // This is for HTC where location is not active for spare parts
        #    // <_0182_DRY_BcsIssueMatForMRODefaultWh> 7.4.2015 RN
        #    if (!this.validateItem())
        #    {
        #        throw Exception::Error;
        #    }
        #    inventTable = InventTable::find(itemId);
        #    if (!InventDimSetup::find(inventTable.DimGroupId, fieldNum(InventDim, WmsLocationId)).Active &&
        #    // </_0182_DRY_BcsIssueMatForMRODefaultWh>
        #        !inventLocationId &&
        #        wmsLocationId)
        #    {
        #        inventLocationId = wmsLocationId;
        #        wmsLocationId    = '';
        #    }
        #
        #    // <_0182_DRY_BcsIssueMatForMRODefaultWh> 7.4.2015 RN
        #    if (!inventLocationId)
        #    {
        #        inventLocationId = InventParameters::find().BcsDefaultMROWarehouse;
        #        if (!wmsLocationId)
        #        {
        #            wmsLocationId = InventLocation::find(inventLocationId).WMSlocationIdDefaultIssue;
        #        }
        #    }
        #    // </_0182_DRY_BcsIssueMatForMRODefaultWh>
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{;
        #    this.setJournalNameId();
        #
        #    // Create journal
        #    this.createJournal();
        #    this.createLine();
        #
        #    if (journalTable)
        #    {
        #        // Post the journal
        #        InventJournalCheckPost::newPostJournal(journalTable).run();
        #    }
        #}
      ENDSOURCE
      SOURCE #setJournalNameId
        #protected void setJournalNameId()
        #{
        #    InventTable inventTable;
        #    ;
        #
        #    // journal name id
        #    inventTable = InventTable::find(itemId);
        #    if (inventTable.projCategoryId)
        #    {
        #        journalNameId = BcsIssueMaterialForMaintenanceJourName::find(inventTable.projCategoryId).JournalNameId;
        #    }
        #
        #    if (!journalNameId)
        #    {
        #        journalNameId = InventParameters::find().BcsMroJournalNameId;
        #    }
        #
        #    if (!journalNameId)
        #    {
        #        throw error(strFmt("@ADR523",
        #                           fieldid2pname(tableNum(InventParameters), fieldNum(InventParameters, BcsMroJournalNameId)),
        #                           tableid2pname(tableNum(InventParameters)),
        #                           tableid2pname(tableNum(BcsIssueMaterialForMaintenanceJourName))));
        #    }
        #}
      ENDSOURCE
      SOURCE #validateItem
        #// <_0182_DRY_BcsIssueMatForMRODefaultWh> 7.4.2015 RN
        #private boolean validateItem()
        #{
        #    boolean ok;
        #    ;
        #
        #    if (!itemId)
        #    {
        #        ok = checkFailed("@SYS25157");
        #    }
        #    else
        #    {
        #        ok = InventTable::checkExist(itemId);
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean ok = super();
        #    boolean okWh;
        #    ;
        #
        #    if (!emplId)
        #    {
        #        ok = checkFailed("@SYS24420");
        #    }
        #    else
        #    {
        #        ok = EmplTable::checkExist(emplId) && ok;
        #    }
        #
        #    // <_0182_DRY_BcsIssueMatForMRODefaultWh> 7.4.2015 RN
        #    // The code on item validation was put into individual nethod.
        #    ok = this.validateItem() && ok;
        #    // </_0182_DRY_BcsIssueMatForMRODefaultWh>
        #
        #    if (!inventLocationId)
        #    {
        #        okWh = checkFailed("@SYS85069");
        #    }
        #    else
        #    {
        #        okWh = InventLocation::checkExist(inventLocationId);
        #    }
        #
        #    ok = ok && okWh;
        #
        #    // It makes sence to check location only if warehouse is OK.
        #    if (okWh && wmsLocationId)
        #    {
        #        if (!WmsLocation::exist(wmsLocationId, inventLocationId))
        #        {
        #            ok = checkFailed(strFmt("@SYS53781", wmsLocationId, inventLocationId));
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSInventPickRefSales выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSInventPickRefSales
    Id 50098
    PROPERTIES
      Name                #BCSInventPickRefSales
      Extends             #BCSInventPickRef
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #adHocPicking
        #// <_0261_CrossCheck> 21.6.2016 PESE
        #BcsAdhocPicking adHocPicking()
        #{;
        #    return InventParameters::find().BcsAdhocPickingSales;
        #}
      ENDSOURCE
      SOURCE #canIncreaseExistingLineQty
        #protected boolean canIncreaseExistingLineQty()
        #{;
        #    return false;
        #}
      ENDSOURCE
      SOURCE #canIncreaseQty
        #protected boolean canIncreaseQty()
        #{;
        #    return false;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class BCSInventPickRefSales extends BCSInventPickRef
        #{
        #    SalesTable  salesTable;
        #    SalesLine   salesLine;
        #}
      ENDSOURCE
      SOURCE #createLine
        #protected boolean createLine(InventQty _qty)
        #{;
        #    // Never create sales line!
        #    return false;
        #}
      ENDSOURCE
      SOURCE #defaultInventLocationId
        #InventLocationId defaultInventLocationId()
        #{
        #    InventLocationId    inventLocationId;
        #    ;
        #
        #    return inventLocationId;
        #}
      ENDSOURCE
      SOURCE #findLine
        #// <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #// <OLD>
        #//protected void findLine()
        #// </OLD>
        #protected void findLine(boolean _exclBcsAutoCreated = false)
        #// </_0094_DRY_BcsPickingCrossCheckConfirm>
        #{
        #    InventDim   inventDim;
        #    ;
        #
        #    select firstOnly salesLine
        #        where   salesLine.SalesId   == refId    &&
        #                salesLine.ItemId    == itemId
        #        join    inventDim
        #        where   inventDim.inventDimId           == salesLine.InventDimId              &&
        #                inventDim.configId              == inventDimItem.configId           &&
        #                inventDim.InventColorId         == inventDimItem.InventColorId      &&
        #                inventDim.InventSizeId          == inventDimItem.InventSizeId;
        #}
      ENDSOURCE
      SOURCE #findLineInventTrans
        #public Common findLineInventTrans(InventTrans _inventTrans)
        #{;
        #    return _inventTrans.salesLine();
        #}
      ENDSOURCE
      SOURCE #isCrosscheckConfirmationRequired
        #// <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #public boolean isCrosscheckConfirmationRequired(ItemId _itemId, InventDim _inventDim)
        #{
        #    // <_0261_CrossCheck> 21.6.2016 PESE
        #    // <OLD>
        #    //return false;
        #    // </OLD>
        #    return super(_itemId, _inventDim);
        #    // </_0261_CrossCheck>
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(InventTransRefId    _refId)
        #{;
        #    super(_refId);
        #
        #    orderTable  = salesTable;
        #    orderLine   = salesLine;
        #}
      ENDSOURCE
      SOURCE #orderTable
        #protected Common orderTable()
        #{;
        #    if (!salesTable)
        #    {
        #        salesTable = salesTable::find(refId);
        #    }
        #
        #    return salesTable;
        #}
      ENDSOURCE
      SOURCE #totalItemPickedQty
        #public container totalItemPickedQty(ItemId _itemId, InventDim _inventDim = InventDim::find(InventDim::inventDimIdBlank()))
        #{
        #    SalesLine   salesLineLocal;
        #    InventDim   inventDim;
        #    Qty         totalQty;
        #    Qty         qty;
        #    UnitId      unitId;
        #    UnitId      inventUnitId;
        #    boolean     firstLine = true;
        #    ;
        #
        #    while select salesLineLocal
        #        where   salesLineLocal.SalesId   == refId  &&
        #                salesLineLocal.ItemId    == _itemId
        #        join    inventDim
        #        where   inventDim.inventDimId   == salesLineLocal.InventDimId  &&
        #                inventDim.InventColorId == _inventDim.InventColorId &&
        #                inventDim.InventSizeId  == _inventDim.InventSizeId  &&
        #                inventDim.configId      == _inventDim.configId
        #    {
        #        qty = this.inventTransPickedQty(salesLineLocal.InventTransId);
        #
        #        if (firstLine)
        #        {
        #            inventUnitId    = salesLineLocal.inventTable().inventUnitId();
        #            unitId          = salesLineLocal.SalesUnit; // this is the picking unit
        #            firstLine       = false;
        #        }
        #
        #        if (inventUnitId != salesLineLocal.SalesUnit)
        #        {
        #            qty = UnitConvert::qty(qty, inventUnitId, unitId, _itemId);
        #        }
        #
        #        totalQty += qty;
        #    }
        #
        #    return [totalQty,unitId];
        #}
      ENDSOURCE
      SOURCE #totalPalletPickedQty
        #public container totalPalletPickedQty(
        #    WmsPalletId _palletId,
        #    ItemId      _itemId,
        #    InventDim   _inventDim = InventDim::find(InventDim::inventDimIdBlank()))
        #{
        #    SalesLine   salesLineLocal;
        #    InventTrans inventTrans;
        #    InventDim   inventDim;
        #    InventDim   inventDimTrans;
        #    Qty         totalQty;
        #    Qty         qty;
        #    UnitId      unitId;
        #    UnitId      inventUnitId;
        #    boolean     firstLine = true;
        #    ItemId      itemIdOld;
        #    ;
        #
        #    while select salesLineLocal // ProdBom is needed to get unit
        #        where   salesLineLocal.SalesId == refId  &&
        #               (!itemId || salesLineLocal.ItemId  == _itemId)
        #        join    inventTrans
        #        where   inventTrans.InventTransId   == salesLineLocal.InventTransId
        #        join    inventDimTrans
        #        where   inventDimTrans.inventDimId  == inventTrans.inventDimId  &&
        #                inventDimTrans.wMSPalletId  == _palletId                &&
        #                inventDimTrans.configId     == _inventDim.configId      &&
        #                inventDim.InventColorId == _inventDim.InventColorId &&
        #                inventDim.InventSizeId  == _inventDim.InventSizeId
        #    {
        #        qty = inventTrans.Qty;
        #
        #        if (firstLine)
        #        {
        #            unitId          = salesLineLocal.SalesUnit; // this is the picking unit
        #            inventUnitId    = salesLineLocal.inventTable().inventUnitId();
        #            firstLine       = false;
        #        }
        #        else
        #        {
        #            // Normally there is only one item on a pallet
        #            if (salesLineLocal.ItemId != itemIdOld)
        #            {
        #                inventUnitId = salesLineLocal.inventTable().inventUnitId();
        #            }
        #        }
        #
        #        if (qty && inventUnitId != salesLineLocal.SalesUnit)
        #        {
        #            qty = UnitConvert::qty(qty, inventUnitId, unitId, salesLineLocal.ItemId);
        #        }
        #
        #        totalQty += qty;
        #
        #        itemIdOld = salesLineLocal.ItemId;
        #    }
        #
        #    if (!unitId)
        #    {
        #        select firstOnly salesLineLocal
        #            join    inventTrans
        #            join    inventDimTrans
        #            where   inventTrans.ItemId          == salesLineLocal.ItemId    &&
        #                    inventDimTrans.inventDimId  == inventTrans.inventDimId  &&
        #                    inventDimTrans.wMSPalletId  == _palletId                &&
        #                    salesLineLocal.SalesId      == refId;
        #
        #        unitId = salesLineLocal.SalesUnit;
        #
        #        if (!unitId)
        #        {
        #            unitId = InventTable::find(inventTrans.ItemId).bomUnitId();
        #        }
        #    }
        #
        #    return [totalQty,unitId];
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSInventPickRefProd выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSInventPickRefProd
    Id 50097
    PROPERTIES
      Name                #BCSInventPickRefProd
      Extends             #BCSInventPickRef
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #adHocPicking
        #// <_0261_CrossCheck> 21.6.2016 PESE
        #BcsAdhocPicking adHocPicking()
        #{;
        #    return InventParameters::find().BcsAdhocPickingProd;
        #}
      ENDSOURCE
      SOURCE #canCreateLine
        #protected boolean canCreateLine()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #canIncreaseExistingLineQty
        #protected boolean canIncreaseExistingLineQty()
        #{;
        #    // Never increase quantity on existing line!
        #    return false;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class BCSInventPickRefProd extends BCSInventPickRef
        #{
        #    ProdTable   prodTable;
        #    prodBom     prodBom;
        #}
      ENDSOURCE
      SOURCE #createLine
        #protected boolean createLine(InventQty _qty)
        #{
        #    Qty         bomQty;
        #    InventTable inventTable = InventTable::find(itemId);
        #    InventDim   inventDim;
        #    boolean     ret;
        #    ;
        #
        #    if (_qty > 0)
        #    {
        #        prodBom.clear();
        #        prodBom.initFromProdTable(this.orderTable());
        #
        #        /*
        #        this.ItemId                 = prodJournalBOM.ItemId;
        #        this.setInventDimId(prodJournalBOM.InventDimId);
        #        this.OprNum                 = prodJournalBOM.OprNum;
        #        this.Position               = prodJournalBOM.Position;
        #        this.UnitId                 = prodJournalBOM.bomUnitId;
        #        this.RawMaterialDate        = prodJournalBOM.TransDate;
        #        this.Dimension              = this.copyDimension(prodJournalBOM.Dimension);
        #        */
        #
        #        prodBom.initFromInventTable(inventTable);
        #
        #        inventDim = prodBom.inventDim();
        #        inventDim.InventLocationId  = inventDimItem.InventLocationId;
        #        inventDim.wMSLocationId     = '';
        #        prodBom.setInventDimIdFromInventDim(inventDim);
        #
        #        prodBom.RawMaterialDate = systemDateGet();
        #        prodBom.LineNum         = ProdBom::lastLineNum(prodBom.ProdId) + 1;
        #        prodBom.BcsAutoCreatedByBcsPicking  = NoYes::Yes;
        #
        #        if (prodBom.validateWrite())
        #        {
        #            prodBom.insert();
        #
        #            prodBom.RemainInventPhysical    = _qty;
        #            prodBom.RemainBOMPhysical       = UnitConvert::qty(_qty, inventTable.inventUnitId(), prodBom.UnitId, prodBom.ItemId);
        #
        #            prodBom.update();
        #
        #            ret = true;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #defaultInventLocationId
        #InventLocationId defaultInventLocationId()
        #{
        #    InventLocationId    inventLocationId;
        #    ;
        #
        #    return inventLocationId;
        #}
      ENDSOURCE
      SOURCE #findLine
        #// <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #// <OLD>
        #//protected void findLine()
        #// </OLD>
        #protected void findLine(boolean _exclBcsAutoCreated = false)
        #// </_0094_DRY_BcsPickingCrossCheckConfirm>
        #{
        #    InventDim   inventDim;
        #    ;
        #
        #    select firstOnly prodBom
        #        where   prodBom.ProdId      == refId    &&
        #                prodBom.ItemId      == itemId   &&
        #                // <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #                (!_exclBcsAutoCreated || prodBom.BcsAutoCreatedByBcsPicking == NoYes::No)
        #                // </_0094_DRY_BcsPickingCrossCheckConfirm>
        #        join    inventDim
        #        where   inventDim.inventDimId       == prodBom.InventDimId              &&
        #                inventDim.configId          == inventDimItem.configId           &&
        #                inventDim.InventColorId     == inventDimItem.InventColorId      &&
        #                inventDim.InventSizeId      == inventDimItem.InventSizeId;
        #}
      ENDSOURCE
      SOURCE #findLineInventTrans
        #public Common findLineInventTrans(InventTrans _inventTrans)
        #{;
        #    return _inventTrans.prodBOM();
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(InventTransRefId    _refId)
        #{;
        #    super(_refId);
        #
        #    // <_0367_ProdEndedInventTransOpen> 10.10.2016 PS
        #    // <OLD>
        #    //orderTable  = prodTable;
        #    // </OLD>
        #    orderTable  = this.orderTable();
        #    // </_0367_ProdEndedInventTransOpen>
        #    orderLine   = prodBom;
        #}
      ENDSOURCE
      SOURCE #orderTable
        #protected Common orderTable()
        #{;
        #    if (!prodTable)
        #    {
        #        prodTable = prodTable::find(refId);
        #    }
        #
        #    return prodTable;
        #}
      ENDSOURCE
      SOURCE #totalItemPickedQty
        #public container totalItemPickedQty(ItemId _itemId, InventDim _inventDim = InventDim::find(InventDim::inventDimIdBlank()))
        #{
        #    ProdBom     prodBomLocal;
        #    InventDim   inventDim;
        #    Qty         totalQty;
        #    Qty         qty;
        #    UnitId      unitId;
        #    UnitId      inventUnitId;
        #    boolean     firstLine = true;
        #    ;
        #
        #    while select prodBomLocal
        #        where   prodBomLocal.ProdId  == refId  &&
        #                prodBomLocal.ItemId  == _itemId
        #        join    inventDim
        #        where   inventDim.inventDimId   == prodBomLocal.InventDimId  &&
        #                inventDim.InventColorId == _inventDim.InventColorId &&
        #                inventDim.InventSizeId  == _inventDim.InventSizeId  &&
        #                inventDim.configId      == _inventDim.configId
        #    {
        #        qty = this.inventTransPickedQty(prodBomLocal.InventTransId);
        #
        #        if (firstLine)
        #        {
        #            inventUnitId    = prodBomLocal.inventTable().inventUnitId();
        #            unitId          = prodBomLocal.UnitId; // this is the picking unit
        #            firstLine       = false;
        #        }
        #
        #        if (inventUnitId != prodBomLocal.UnitId)
        #        {
        #            qty = UnitConvert::qty(qty, inventUnitId, unitId, _itemId);
        #        }
        #
        #        totalQty += qty;
        #    }
        #
        #    return [totalQty,unitId];
        #}
      ENDSOURCE
      SOURCE #totalPalletPickedQty
        #public container totalPalletPickedQty(
        #    WmsPalletId _palletId,
        #    ItemId      _itemId,
        #    InventDim   _inventDim = InventDim::find(InventDim::inventDimIdBlank()))
        #{
        #    ProdBom     prodBomLocal;
        #    InventTrans inventTrans;
        #    InventDim   inventDim;
        #    InventDim   inventDimTrans;
        #    Qty         totalQty;
        #    Qty         qty;
        #    UnitId      unitId;
        #    UnitId      inventUnitId;
        #    boolean     firstLine = true;
        #    ItemId      itemIdOld;
        #    ;
        #
        #    while select prodBomLocal // ProdBom is needed to get unit
        #        where   prodBomLocal.ProdId  == refId  &&
        #               (!itemId || prodBomLocal.ItemId  == _itemId)
        #        join    inventTrans
        #        where   inventTrans.InventTransId   == prodBomLocal.InventTransId
        #        join    inventDimTrans
        #        where   inventDimTrans.inventDimId  == inventTrans.inventDimId  &&
        #                inventDimTrans.wMSPalletId  == _palletId                &&
        #                inventDimTrans.configId     == _inventDim.configId      &&
        #                inventDim.InventColorId == _inventDim.InventColorId &&
        #                inventDim.InventSizeId  == _inventDim.InventSizeId
        #    {
        #        qty = inventTrans.Qty;
        #
        #        if (firstLine)
        #        {
        #            unitId          = prodBomLocal.UnitId; // this is the picking unit
        #            inventUnitId    = prodBomLocal.inventTable().inventUnitId();
        #            firstLine       = false;
        #        }
        #        else
        #        {
        #            // Normally there is only one item on a pallet
        #            if (prodBomLocal.ItemId != itemIdOld)
        #            {
        #                inventUnitId = prodBomLocal.inventTable().inventUnitId();
        #            }
        #        }
        #
        #        if (qty && inventUnitId != prodBomLocal.UnitId)
        #        {
        #            qty = UnitConvert::qty(qty, inventUnitId, unitId, prodBomLocal.ItemId);
        #        }
        #
        #        totalQty += qty;
        #
        #        itemIdOld = prodBomLocal.ItemId;
        #    }
        #
        #    if (!unitId)
        #    {
        #        select firstOnly prodBomLocal
        #            join    inventTrans
        #            join    inventDimTrans
        #            where   inventTrans.ItemId          == prodBomLocal.ItemId      &&
        #                    inventDimTrans.inventDimId  == inventTrans.inventDimId  &&
        #                    inventDimTrans.wMSPalletId  == _palletId                &&
        #                    prodBomLocal.ProdId         == refId;
        #
        #        unitId = prodBomLocal.UnitId;
        #
        #        if (!unitId)
        #        {
        #            unitId = InventTable::find(inventTrans.ItemId).bomUnitId();
        #        }
        #    }
        #
        #    return [totalQty,unitId];
        #}
      ENDSOURCE
      SOURCE #validate
        #public boolean validate()
        #{
        #    boolean ret;
        #
        #    ret = super();
        #
        #    // <_0367_ProdEndedInventTransOpen> 10.10.2016 PS
        #    if (prodTable.ProdStatus != ProdStatus::StartedUp)
        #    {
        #        ret = checkFailed(strFmt("@ADR595", prodTable.ProdStatus));
        #    }
        #    // </_0367_ProdEndedInventTransOpen>
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSInventPickRef выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSInventPickRef
    Id 50093
    PROPERTIES
      Name                #BCSInventPickRef
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #adHocPicking
        #// <_0261_CrossCheck> 21.6.2016 PESE
        #BcsAdhocPicking adHocPicking()
        #{;
        #    throw error(Error::missingOverride(funcName()));
        #}
      ENDSOURCE
      SOURCE #canCreateLine
        #protected boolean canCreateLine()
        #{;
        #    return false;
        #}
      ENDSOURCE
      SOURCE #canIncreaseExistingLineQty
        #protected boolean canIncreaseExistingLineQty()
        #{;
        #    return true;
        #}
      ENDSOURCE
      SOURCE #canIncreaseQty
        #protected boolean canIncreaseQty()
        #{;
        #    return true;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class BCSInventPickRef
        #{
        #    // Parameters
        #    InventTransRefId    refId;
        #
        #    // Set in the increateQty() method
        #    ItemId              itemId;
        #    InventDim           inventDimItem; // Only Item dimensions are significant
        #
        #    // Internal
        #    Common              orderTable;
        #    Common              orderLine;
        #}
      ENDSOURCE
      SOURCE #createLine
        #protected boolean createLine(InventQty _qty)
        #{;
        #    throw error(Error::missingOverload(funcName()));
        #}
      ENDSOURCE
      SOURCE #defaultInventLocationId
        #InventLocationId defaultInventLocationId()
        #{;
        #    throw error(Error::missingOverload(funcName()));
        #}
      ENDSOURCE
      SOURCE #findLine
        #// <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #// <OLD>
        #//protected void findLine()
        #// </OLD>
        #protected void findLine(boolean _exclBcsAutoCreated = false)
        #// </_0094_DRY_BcsPickingCrossCheckConfirm>
        #{;
        #    throw error(Error::missingOverload(funcName()));
        #}
      ENDSOURCE
      SOURCE #findLineInventTrans
        #public Common findLineInventTrans(InventTrans _inventTrans)
        #{;
        #    throw error(Error::missingOverload(funcName()));
        #}
      ENDSOURCE
      SOURCE #increaseLineQty
        #protected boolean increaseLineQty(InventQty _qty)
        #{;
        #    throw error(Error::missingOverload(funcName()));
        #}
      ENDSOURCE
      SOURCE #increaseQty
        #public final boolean increaseQty(ItemId _itemId, InventDim _inventDim, InventQty _qty)
        #{
        #    boolean ok;
        #    ;
        #
        #    // This must be initialized here, because at the moment the class is instantiated these may be unknown (complete pallet picking, item is not specified)
        #    itemId          = _itemId;
        #    inventDimItem   = _inventDim;
        #
        #    if (this.canIncreaseQty())
        #    {
        #        if (this.canIncreaseExistingLineQty())
        #        {
        #            this.findLine();
        #
        #            if (orderLine)
        #            {
        #                ok = this.increaseLineQty(_qty);
        #            }
        #            else
        #            {
        #                if (this.canCreateLine())
        #                {
        #                   ok = this.createLine(_qty);
        #                }
        #            }
        #        }
        #        else
        #        {
        #            if (this.canCreateLine())
        #            {
        #                ok = this.createLine(_qty);
        #            }
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #inventTransPickedQty
        #protected final qty inventTransPickedQty(InventTransId _inventTransId)
        #{
        #    InventTrans inventTrans;
        #    ;
        #
        #    select sum(Qty) from inventTrans
        #        where   inventTrans.InventTransId   == _inventTransId &&
        #              ((inventTrans.StatusIssue     <= StatusIssue::Picked && inventTrans.StatusReceipt == StatusReceipt::None) ||
        #               (inventTrans.StatusReceipt   <= StatusReceipt::Registered && inventTrans.StatusIssue == StatusIssue::None));
        #
        #    return inventTrans.Qty;
        #}
      ENDSOURCE
      SOURCE #isCrosscheckConfirmationRequired
        #// <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #public boolean isCrosscheckConfirmationRequired(ItemId _itemId, InventDim _inventDim)
        #{
        #    boolean ret;
        #    ;
        #
        #    // This must be initialized here, because at the moment the class is instantiated these may be unknown (complete pallet picking, item is not specified)
        #    itemId          = _itemId;
        #    inventDimItem   = _inventDim;
        #
        #    // <_0261_CrossCheck> 21.6.2016 PESE
        #    // <OLD>
        #    //if (InventParameters::find().BcsPickCrossCheckConfirmation)
        #    //{
        #    //    ret = !this.lineExists(true);
        #    //}
        #    // </OLD>
        #    switch (this.adHocPicking())
        #    {
        #        case BcsAdhocPicking::Allowed:
        #            ret = false;
        #            break;
        #
        #        case BcsAdhocPicking::ConfirmationRequired:
        #            ret = true;
        #            break;
        #
        #        case BcsAdhocPicking::Disallowed:
        #            throw error(strFmt("Item %1 is not allowed for picking on this order."));
        #
        #        default:
        #            throw error(Error::wrongUseOfFunction(funcName()));
        #    }
        #    // </_0261_CrossCheck>
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #lineExists
        #// <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #private boolean lineExists(boolean _exclBcsAutoCreated)
        #{;
        #    this.findLine(_exclBcsAutoCreated);
        #    return orderLine.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #new
        #//protected void new(
        #public void new(
        #    InventTransRefId    _refId)
        #    //ItemId              _itemId,
        #    //InventDim           _inventDim)
        #{;
        #    refId           = _refId;
        #    //itemId          = _itemId;
        #    //inventDimItem   = _inventDim;
        #}
      ENDSOURCE
      SOURCE #orderTable
        #protected Common orderTable()
        #{;
        #    throw error(Error::missingOverload(funcName()));
        #}
      ENDSOURCE
      SOURCE #totalItemPickedQty
        #// [quantity,unit]
        #public container totalItemPickedQty(ItemId _itemId, InventDim _inventDim = InventDim::find(InventDim::inventDimIdBlank()))
        #{;
        #    throw error(Error::missingOverride(funcName()));
        #}
      ENDSOURCE
      SOURCE #totalPalletPickedQty
        #// [quantity,unit]
        #public container totalPalletPickedQty(
        #    WmsPalletId _palletId,
        #    ItemId      _itemId,
        #    InventDim   _inventDim = InventDim::find(InventDim::inventDimIdBlank()))
        #{
        #    throw error(Error::missingOverride(funcName()));
        #}
      ENDSOURCE
      SOURCE #validate
        #public boolean validate()
        #{;
        #    return true;
        #}
      ENDSOURCE
      SOURCE #construct
        #static BCSInventPickRef construct(
        #    InventTransType     _transType,
        #    InventTransRefId    _refId,
        #    ItemId              _itemId,
        #    InventDim           _inventDim)
        #{
        #    BCSInventPickRef    bcsInventPickRef;
        #    ;
        #
        #    switch (_transType)
        #    {
        #        case InventTransType::TransferOrderShip:    return new BCSInventPickRefTransferOrder(_refId);
        #        case InventTransType::ProdLine:             return new BCSInventPickRefProd(_refId);
        #        case InventTransType::Sales:                return new BCSInventPickRefSales(_refId);
        #        default: throw error(Error::wrongUseOfFunction(funcName()));
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSInventPickPalletInfo выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSInventPickPalletInfo
    Id 50312
    PROPERTIES
      Name                #BCSInventPickPalletInfo
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// <_0261_BCSInventUnpick> 28.2.2016 RN
        #class BCSInventPickPalletInfo extends BCSBase
        #{
        #    #define.InventTransTypeUndefined(InventTransType::SummedUp)
        #
        #    // Parameters
        #    InventTransRefId    refId;
        #    WmsPalletId         palletId;
        #
        #    // Internal
        #    InventDim           inventDimNew;
        #    InventTransType     inventTransType;
        #    BCSInventPickRef    bcsInventPickRef;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF30.1.C';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    [refId,
        #     palletId] = this.funcParamCon();
        #
        #    if (!this.resolveTransRef())
        #    {
        #        throw error("@SYS107512");
        #    }
        #
        #    // <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 2));
        #    // </_DRY_0078_BCSGS1Code128AIHandling>
        #}
      ENDSOURCE
      SOURCE #palletId
        #// <_0340_BcsLogPalletId> 19.6.2016 PESE
        #protected WMSPalletId palletId()
        #{;
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    WmsPallet       wmsPallet;
        #    BcsInventDim    bcsInventDim;
        #    InventDim       inventDim;
        #    InventDimParm   inventDimParmSkip;
        #    ItemId          itemId;
        #    Qty             totalPickedQty;
        #    UnitId          unitId;
        #    ;
        #
        #    wmsPallet = WmsPallet::find(palletId);
        #
        #    inventDim.wMSPalletId   = palletId;
        #
        #    inventDimParmSkip.InventBatchIdFlag         = NoYes::Yes;
        #    inventDimParmSkip.InventSerialIdFlag        = NoYes::Yes;
        #    inventDimParmSkip.InventProfileIdFlag_RU    = NoYes::Yes;
        #    inventDimParmSkip.InventOwnerIdFlag_RU      = NoYes::Yes;
        #    inventDimParmSkip.InventGTDIdFlag_RU        = NoYes::Yes;
        #    inventDimParmSkip.InventSiteIdFlag          = NoYes::Yes;
        #    inventDimParmSkip.InventLocationIdFlag      = NoYes::Yes;
        #    inventDimParmSkip.WMSLocationIdFlag         = NoYes::Yes;
        #
        #    bcsInventDim = new BcsInventDim('', inventDim, 0, inventDimParmSkip);
        #    bcsInventDim.checkUpdateInventDimensions();
        #
        #    itemId = bcsInventDim.itemId();
        #    this.addRetValueCon(itemId);
        #    this.addRetValueCon(wmsPallet.InventLocationId);
        #    this.addRetValueCon(wmsPallet.WmsLocationId);
        #    this.addRetValueCon(bcsInventDim.qty());
        #
        #    //[totalPickedQty,unitId] = bcsInventPickRef.totalItemPickedQty(itemId, inventDim);
        #    [totalPickedQty,unitId] = bcsInventPickRef.totalPalletPickedQty(palletId, itemId, inventDim);
        #
        #    this.addRetValueCon(-totalPickedQty);
        #    this.addRetValueCon(unitId);
        #}
      ENDSOURCE
      SOURCE #resolveTransRef
        #private boolean resolveTransRef()
        #{
        #    InventTransferTable inventTransferTable;
        #    ProdTable           prodTable;
        #    SalesTable          salesTable;
        #    boolean             ok = true;
        #    ;
        #
        #    // Set default trans type to undefined
        #    inventTransType = #InventTransTypeUndefined;
        #
        #    if (!refId)
        #    {
        #        ok = checkFailed("@ADR512");
        #    }
        #    else
        #    {
        #        select firstOnly inventTransferTable
        #            where   inventTransferTable.TransferId  == refId;
        #
        #        if (inventTransferTable)
        #        {
        #            inventTransType = InventTransType::TransferOrderShip;
        #        }
        #        else
        #        {
        #            select firstOnly ProdTable
        #                where   prodTable.ProdId    == refId;
        #
        #            if (prodTable)
        #            {
        #                inventTransType = InventTransType::ProdLine;
        #            }
        #            else
        #            {
        #                select firstOnly salesTable
        #                    where   salesTable.SalesId  == refId;
        #
        #                if (salesTable)
        #                {
        #                    inventTransType = InventTransType::Sales;
        #                }
        #            }
        #        }
        #
        #        if (inventTransType == #InventTransTypeUndefined)
        #        {
        #            ok = checkFailed(strFmt("@SYS15067", refId));
        #        }
        #        else
        #        {
        #            bcsInventPickRef = BCSInventPickRef::construct(inventTransType, refId, '', InventDim::find(InventDim::inventDimIdBlank()));
        #        }
        #    }
        #
        #    return ok && bcsInventPickRef != null;
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean ok = super();
        #    ;
        #
        #    if (!WmsPallet::exist(palletId))
        #    {
        #        ok = checkFailed(strFmt("@SYS60578", palletId));
        #    }
        #
        #    // Validate pick reference only if so far ok
        #    ok = ok && bcsInventPickRef.validate();
        #
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSInventPick выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSInventPick
    Id 50043
    PROPERTIES
      Name                #BCSInventPick
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #checkMovePallet
        #// 8.3.2016 RN: Make sure pallet is in the specified wh/location
        #private void checkMovePallet()
        #{
        #    WmsPallet   wmsPallet;
        #    int         posStart;
        #    int         posEnd;
        #    ;
        #
        #    if (this.isEntirePalletPicking())
        #    {
        #        wmsPallet   = WmsPallet::find(palletId);
        #
        #        if (!wmsPallet)
        #        {
        #            throw error(strFmt("@SYS50578", palletId));
        #        }
        #
        #        if ((wmsPallet.inventLocationId != warehouseId ||
        #             wmsPallet.wMSLocationId    != locationId) &&
        #             warehouseId && locationId)
        #        {
        #            posStart = infolog.line();
        #
        #            WMSPalletDoMove::movePallet(palletId, warehouseId, locationId);
        #
        #            posEnd = infolog.line();
        #
        #            if (posEnd != posStart)
        #            {
        #                // Cut warnings from infolog, so that they do not show up on terminal in case there is an error later.
        #                infolog.cut(posStart + 1, posEnd);
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class BCSInventPick extends BCSBase
        #{
        #    #define.InventTransTypeUndefined(InventTransType::SummedUp)
        #
        #    // Parameters
        #    InventTransRefId    refId;
        #    InventTransId       inventTransId;
        #    ItemId              itemId;
        #    ConfigId            configId;
        #    InventLocationId    warehouseId;
        #    WmsLocationId       locationId;
        #    WmsPalletId         palletId;
        #    InventBatchId       batchId;
        #    Qty                 qty;
        #    UnitId              bcsUnitId;
        #    // <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #    boolean             crossCheckConfirmed;
        #    // </_0094_DRY_BcsPickingCrossCheckConfirm>
        #    // <_0261_BCSInventUnpick> 28.2.2016 RN
        #    InventTransRefId    refIdTransferTo;
        #    // </_0261_BCSInventUnpick>
        #
        #    // Additional parameters
        #    boolean             isQtySpecified;
        #    boolean             isCrossCheckConfirmationRequested;
        #
        #    // Internal
        #    InventDim           inventDimNew;
        #    InventTransType     inventTransType;
        #    BCSInventPickRef    bcsInventPickRef;
        #    // <_0082_DRY_BcsPrintPalletLabelOnUnpick> 21.8.2014 RN
        #    Set                 setPrintPallets; // for pallet label printing
        #    // </_0082_DRY_BcsPrintPalletLabelOnUnpick>
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF30.1.B';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    // PickingListPicking(
        #    // string TerminlId, DateTime excecDateTime,
        #    // string PickingListId, string InventTransId, string ItemId, string ConfigID, string WarehouseId, string LocationId, string PalletId, string BatchId, double Quantity);
        #
        #    [refId,
        #     inventTransId,
        #     itemId,
        #     configId,
        #     warehouseId,
        #     locationId,
        #     palletId,
        #     batchId,
        #     qty,
        #     // <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #     //<OLD>
        #     //bcsUnitId] = this.funcParamCon();
        #     // </OLD>
        #     bcsUnitId,
        #     crossCheckConfirmed,
        #     refIdTransferTo] = this.funcParamCon();
        #     // </_0094_DRY_BcsPickingCrossCheckConfirm>
        #
        #     // If called from old application then this parameter is not passed, actually it's value is "0".
        #     if (refIdTransferTo == "0")
        #     {
        #        refIdTransferTo = '';
        #     }
        #
        #    if (!this.resolveTransRef())
        #    {
        #        throw error("@SYS107512");
        #    }
        #
        #    // <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 7));
        #    // </_DRY_0078_BCSGS1Code128AIHandling>
        #
        #    isQtySpecified = qty != 0;
        #
        #    // Get warehouse/location from scanned location
        #    [warehouseId, locationId] = BCSBase::wmsWhLocSplit(conPeek(this.funcParamCon(), 6), warehouseId);
        #
        #    if (!warehouseId)
        #    {
        #        warehouseId = bcsInventPickRef.defaultInventLocationId();
        #    }
        #
        #    // Batch Id may be a composed GS1 barcode
        #    [itemId, palletId, batchId, qty] = this.decodeEAN128Barcode(conPeek(this.funcParamCon(), 8), itemId, palletId, batchId, qty);
        #}
      ENDSOURCE
      SOURCE #isCrossCheckConfirmationRequested
        #boolean isCrossCheckConfirmationRequested()
        #{
        #    return isCrossCheckConfirmationRequested;
        #}
      ENDSOURCE
      SOURCE #isEntirePalletPicking
        #// Pick the entire pallet
        #private boolean isEntirePalletPicking()
        #{;
        #    return palletId && !itemId && !batchId && !qty;
        #}
      ENDSOURCE
      SOURCE #palletId
        #// <_0340_BcsLogPalletId> 19.6.2016 PESE
        #protected WMSPalletId palletId()
        #{;
        #   return palletId;
        #}
      ENDSOURCE
      SOURCE #pickItem
        #private void pickItem(Level _level = 0, Qty _qty = qty)
        #{
        #    InventTrans         inventTrans;
        #    InventDim           inventDim;
        #    InventDim           inventDimCriteria;
        #    InventDimParm       inventDimParm;
        #    int                 iteration;
        #    Qty                 qtyRemaining;
        #    boolean             searchIteration;
        #    boolean             inventTransFound;
        #    InventDim           inventDimPick;
        #    TmpInventTransWMS   tmpInventTransWMS;
        #    Qty                 qtyPick;
        #    Common              common;
        #    ;
        #
        #    // <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #    // <OLD>
        #    //if (!isCrossCheckConfirmationRequested &&
        #    //    InventParameters::find().BcsPickCrossCheckConfirmation &&
        #    //    !crossCheckConfirmed)
        #    //{
        #    //    isCrossCheckConfirmationRequested = bcsInventPickRef.isCrosscheckConfirmationRequired(itemId, inventDimNew);
        #    //}
        #    // </OLD>
        #    if (!crossCheckConfirmed)
        #    {
        #        if (!isCrossCheckConfirmationRequested)
        #        {
        #            isCrossCheckConfirmationRequested = bcsInventPickRef.isCrosscheckConfirmationRequired(itemId, inventDimNew);
        #        }
        #
        #        if (isCrossCheckConfirmationRequested)
        #        {
        #            return; // RETURN HERE!!!
        #        }
        #    }
        #
        #    qtyRemaining = _qty;
        #
        #    inventDimNew = InventDim::findOrCreate(inventDimNew);
        #
        #    inventDimCriteria.data(inventDimNew);
        #    inventDimParm.initFromInventDim(inventDimCriteria);
        #
        #    // Clear flags for RU specific dimensions.
        #    inventDimParm.InventGTDIdFlag_RU        = NoYes::No;
        #    inventDimParm.InventProfileIdFlag_RU    = NoYes::No;
        #    inventDimParm.InventOwnerIdFlag_RU      = NoYes::No;
        #
        #    while (qtyRemaining > 0 && iteration < 5)
        #    {
        #        // Actually the loop is not necessary because if inventTrans.Qty is less then qty
        #        // then the InventTrans.Qty is increased to qty.
        #        //while (qtyRemaining > 0)
        #        {
        #            while select inventTrans
        #                order by StatusIssue // First updated transactions with status reserved, then OnOrder
        #                where   inventTrans.TransType           == inventTransType  &&
        #                        inventTrans.TransRefId          == refId            &&
        #                        inventTrans.TransChildType      == InventTransChildType::None   &&
        #                        inventTrans.itemId              == itemId           &&
        #                        inventTrans.StatusIssue         >= StatusIssue::ReservPhysical  &&
        #                        inventTrans.StatusIssue         <= StatusIssue::OnOrder
        #                #InventDimJoin(inventTrans.InventDimId, inventDim, inventDimCriteria, inventDimParm)
        #            {
        #                inventTransFound = true;
        #
        #                inventDimPick.data(inventTrans.inventDim());
        #                inventDimPick.wMSPalletId       = inventDimNew.WmsPalletId;
        #                inventDimPick.inventBatchId     = inventDimNew.inventBatchId;
        #                inventDimPick.InventLocationId  = inventDimNew.InventLocationId;
        #                inventDimPick.wMSLocationId     = inventDimNew.wMSLocationId;
        #                inventDimPick.InventGtdId_RU    = inventDimNew.InventGtdId_RU; // 24.2.2016 AS
        #                inventDimPick   = InventDim::findOrCreate(inventDimPick);
        #
        #                tmpInventTransWms.LineNum   = 1;
        #                tmpInventTransWms.initFromInventTrans(inventTrans);
        #                qtyPick = min(qtyRemaining, -inventTrans.Qty);
        #                tmpInventTransWms.InventQty     = qtyPick;
        #                tmpInventTransWms.InventDimId   = inventDimPick.inventDimId;
        #                tmpInventTransWms.insert();
        #
        #                common  = bcsInventPickRef.findLineInventTrans(inventTrans);
        #
        #                if (InventTransWMS_Pick::updateInvent(common, tmpInventTransWMS))
        #                {
        #                    qtyRemaining = qtyRemaining - qtyPick;
        #                }
        #
        #                if (qtyRemaining <= 0)
        #                {
        #                    break;
        #                }
        #            }
        #        }
        #
        #        searchIteration = qtyRemaining > 0;
        #
        #        while (searchIteration)
        #        {
        #            switch (iteration)
        #            {
        #                case 0:
        #                    if (inventDimCriteria.wMSPalletId)
        #                    {
        #                        inventDimParm.WMSPalletIdFlag = NoYes::No;
        #                        searchIteration = false;
        #                    }
        #                    break;
        #
        #                case 1:
        #                    if (inventDimCriteria.inventBatchId)
        #                    {
        #                        inventDimParm.InventBatchIdFlag = NoYes::No;
        #                        searchIteration = false;
        #                    }
        #                    break;
        #
        #                case 2:
        #                    if (inventDimCriteria.WMSLocationId)
        #                    {
        #                        inventDimParm.WmsLocationIdFlag = NoYes::No;
        #                        searchIteration = false;
        #                    }
        #                    break;
        #
        #                case 3:
        #                    if (inventDimCriteria.InventLocationId)
        #                    {
        #                        inventDimCriteria.InventLocationId  = "";
        #                        searchIteration = false;
        #                    }
        #                    break;
        #
        #                default:
        #                    searchIteration = false;
        #            }
        #
        #            iteration++;
        #        }
        #    }
        #
        #    if (qtyRemaining > 0)
        #    {
        #        if (_level > 0)
        #        {
        #            warning("@ADR504");
        #            throw error(strFmt("@ADR505", qtyRemaining, InventTable::find(itemId).inventUnitId()));
        #        }
        #        else
        #        {
        #            // Increase order line quantity and pick item again
        #            if (bcsInventPickRef.increaseQty(itemId, inventDimNew, qtyRemaining))
        #            {
        #                this.pickItem(_level + 1, qtyRemaining);
        #            }
        #            else
        #            {
        #                warning("@ADR511");
        #                throw error(strFmt("@ADR505", qtyRemaining, InventTable::find(itemId).inventUnitId()));
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #pickPallet
        #// Pick the entire pallet
        #private void pickPallet()
        #{
        #    WmsPallet               wmsPallet;
        #    InventDimOnHand         inventDimOnHand;
        #    SetEnumerator           se;
        #    InventDimOnHandMember   inventDimOnHandMember;
        #    boolean                 isPalletPicked;
        #    int                     loop;
        #    ;
        #
        #    wmsPallet   = WmsPallet::find(palletId);
        #
        #    if (!wmsPallet)
        #    {
        #        throw error(strFmt("@SYS50578", palletId));
        #    }
        #
        #    //inventDimOnHand         = wmsPallet.onHandAvailableDetailed();
        #    inventDimOnHand         = wmsPallet.onHandDetailed();
        #    se                      = inventDimOnHand.getEnumerator();
        #
        #    // If crosscheck confirmation is not required or it was confirmed then go directly to actual picking.
        #    // <_0261_CrossCheck> 21.6.2016 PESE
        #    // <OLD>
        #    //if (!InventParameters::find().BcsPickCrossCheckConfirmation ||
        #    // </OLD>
        #    if (bcsInventPickRef.adHocPicking() == BcsAdHocPicking::Allowed ||
        #    // </_0261_CrossCheck>
        #        crossCheckConfirmed)
        #    {
        #        loop = 1;
        #    }
        #
        #    while (loop <= 1)
        #    {
        #        se.reset();
        #
        #        while (se.moveNext())
        #        {
        #            inventDimOnHandMember   = se.current();
        #
        #            itemId                  = inventDimOnHandMember.parmItemId();
        #            inventDimNew            = InventDim::find(inventDimOnHandMember.parmInventDimId());
        #
        #            // <_0259_BCS_2015> 28.2.2016 RN
        #            if (warehouseId && warehouseId != inventDimNew.InventLocationId)
        #            {
        #                throw error(strFmt("@ADR508", palletId, warehouseId));
        #            }
        #
        #            if (locationId && locationId != inventDimNew.wMSLocationId)
        #            {
        #                throw error(strFmt("@ADR509", palletId, locationId));
        #            }
        #            // </_0259_BCS_2015>
        #
        #            qty                     = inventDimOnHandMember.parmInventQty();
        #
        #            // This condition is placed here because of the mess in HTC company, there are negative quantities on pallets.
        #            if (qty > 0)
        #            {
        #                switch (loop)
        #                {
        #                    // In the first loop check if any of the items requires crosscheck confirmation.
        #                    case 0:
        #                        // <_0261_CrossCheck> 21.6.2016 PESE
        #                        // <OLD>
        #                        //isCrossCheckConfirmationRequested = bcsInventPickRef.isCrosscheckConfirmationRequired(itemId, inventDimNew);
        #                        // </OLD>
        #                        isCrossCheckConfirmationRequested =
        #                            isCrossCheckConfirmationRequested ||
        #                            bcsInventPickRef.isCrosscheckConfirmationRequired(itemId, inventDimNew);
        #                        // </_0261_CrossCheck>
        #                        break;
        #
        #                    // If crosscheck is confirmed or non of the items requires the confirmation do the actual picking.
        #                    case 1:
        #                        this.pickItem();
        #                        isPalletPicked = true;
        #                        break;
        #
        #                    default: throw error(Error::wrongUseOfFunction(funcName()));
        #                }
        #            }
        #
        #            // <_0261_CrossCheck> 21.6.2016 PESE
        #            // Break the loop at the first item that requires crosscheck confirmation.
        #            if (loop == 0 && isCrossCheckConfirmationRequested)
        #            {
        #                break;
        #            }
        #            // </_0261_CrossCheck>
        #        }
        #
        #        loop++;
        #    }
        #
        #    if (!isPalletPicked)
        #    {
        #        throw error(strFmt("@ADR510", palletId));
        #    }
        #}
      ENDSOURCE
      SOURCE #postProcess
        #protected void postProcess()
        #{
        #    // <_0082_DRY_BcsPrintPalletLabelOnUnpick> 21.8.2014 RN
        #    SetEnumerator   se;
        #    WmsPalletId     localPalletId;
        #    // </_0082_DRY_BcsPrintPalletLabelOnUnpick>
        #    ;
        #
        #    super();
        #
        #    // <_0082_DRY_BcsPrintPalletLabelOnUnpick> 21.8.2014 RN
        #    if (setPrintPallets && setPrintPallets.elements() > 0)
        #    {
        #        se = setPrintPallets.getEnumerator();
        #
        #        while (se.moveNext())
        #        {
        #            localPalletId = se.current();
        #            // <_0325_DRY_BcsInventoryLabels> 27.4.2016 RN
        #            // <OLD>
        #            //this.printPalletLabel(localPalletId);
        #            // </OLD>
        #            this.printInventoryLabel(localPalletId);
        #            // </_0325_DRY_BcsInventoryLabels>
        #        }
        #    }
        #    // </_0082_DRY_BcsPrintPalletLabelOnUnpick>
        #}
      ENDSOURCE
      SOURCE #printInventoryLabel
        #// <_0325_DRY_BcsInventoryLabels> 27.4.2016 RN
        #// Label is printed only in case of unpick - inventory label A5 has to be printed (return leftover quantity from production back on a pallet).
        #protected void printInventoryLabel(WMSPalletId _palletId)
        #{
        #    Args                        args;
        #    SysReportRun                rr;
        #    TerminalTable               terminalTable;
        #    RunbaseReportStd            rbr;
        #    FileName                    fileName;
        #    FilePath                    filePath;
        #    FileName                    fileExt;
        #    ;
        #
        #    terminalTable = TerminalTable::find(terminalId);
        #
        #    if (!terminalTable.InventoryLabelPrinterSettings)
        #    {
        #        throw error("Printer settings of Inventory label are not specified on terminal.");
        #    }
        #
        #    args = new Args();
        #    args.name(reportStr(WmsInventoryLabel_A5));
        #    args.caller(this);
        #    args.record(WMSPallet::find(_palletId));
        #    rr = new ReportRun(args);
        #    rr.init();
        #
        #    rbr = new RunbaseReportStd();
        #    rbr.initReportRun(rr);
        #    rbr.unpack(terminalTable.InventoryLabelPrinterSettings);
        #
        #    if (rbr.printJobSettings().getTarget() == PrintMedium::File)
        #    {
        #        // RN: Create unique file name
        #        fileName    = rbr.printJobSettings().fileName();
        #        [filePath, fileName, fileExt] = global::fileNameSplit(fileName);
        #        fileName    = filePath + fileName + strFmt("_%1_%2%3", _palletId, date2Str(today(),321,2,0,2,0,2), strKeep(time2str(timeNow(),3,3),"0123456789")) + fileExt;
        #        rbr.printJobSettings().fileName(fileName);
        #    }
        #
        #    // Set range on selected pallet Id
        #    global::findOrCreateRange_W(rbr.queryRun().query().dataSourceTable(tableNum(InventDim)), fieldNum(InventDim, WmspalletId), SysQuery::value(_palletId));
        #
        #    rbr.run();
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{
        #    SysDictLicenseCode  sysDictLicenseCode;
        #    int                 pickStatus;
        #    BcsInventPick       BcsInventPickTransferTo;
        #    container           funcParamCon2;
        #    ;
        #
        #    if (qty < 0)
        #    {
        #        this.unPickItem();
        #
        #        if (refIdTransferTo)
        #        {
        #            bcsInventPickTransferTo = new BcsInventPick();
        #            bcsInventPickTransferTo.parmBcs2015(this.parmBcs2015());
        #            funcParamCon2             = this.funcParamCon();
        #            funcParamCon2             = conPoke(funcParamCon2, 1, conPeek(funcParamCon2,12)); // refId = refIdTransferTo
        #            funcParamCon2             = conPoke(funcParamCon2, 12, ''); // refIdTransferTo = ''
        #            funcParamCon2             = conPoke(funcParamCon2, 9, -qty); // qty = 0 -> consume entire pallet
        #            bcsInventPickTransferTo.parmInputParam(this.baseParamCon() + funcParamCon2);
        #            bcsInventPickTransferTo.run();
        #
        #            if (bcsInventPickTransferTo.isCrossCheckConfirmationRequested())
        #            {
        #                // Abort everything done so far
        #                ttsAbort;
        #
        #                // In order to pair with ttsCommit
        #                ttsBegin;
        #
        #                pickStatus = BcsPickStatus::CrossCheckConfirmationRequest;
        #                this.addRetValueCon(pickStatus);
        #                this.addRetValueCon(strFmt("@ADR518", itemId, refIdTransferTo));
        #                return;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        if (this.isEntirePalletPicking())
        #        {
        #            this.pickPallet();
        #        }
        #        else
        #        {
        #            this.pickItem();
        #        }
        #    }
        #
        #    // <_0094_DRY_BcsPickingCrossCheckConfirm> 21.8.2014 RN
        #    if (isCrossCheckConfirmationRequested)
        #    {
        #        pickStatus = BcsPickStatus::CrossCheckConfirmationRequest;
        #        this.addRetValueCon(pickStatus);
        #        this.addRetValueCon(strFmt("@ADR518", itemId, refId));
        #    }
        #    else
        #    {
        #        pickStatus = BcsPickStatus::OK;
        #        this.addRetValueCon(pickStatus);
        #    }
        #    // </_0094_DRY_BcsPickingCrossCheckConfirm>
        #}
      ENDSOURCE
      SOURCE #resolveTransRef
        #private boolean resolveTransRef()
        #{
        #    InventTransferTable inventTransferTable;
        #    ProdTable           prodTable;
        #    SalesTable          salesTable;
        #    boolean             ok = true;
        #    ;
        #
        #    // Set default trans type to undefined
        #    inventTransType = #InventTransTypeUndefined;
        #
        #    if (!refId)
        #    {
        #        ok = checkFailed("@ADR512");
        #    }
        #    else
        #    {
        #        select firstOnly inventTransferTable
        #            where   inventTransferTable.TransferId  == refId;
        #
        #        if (inventTransferTable)
        #        {
        #            inventTransType = InventTransType::TransferOrderShip;
        #        }
        #        else
        #        {
        #            select firstOnly ProdTable
        #                where   prodTable.ProdId    == refId;
        #
        #            if (prodTable)
        #            {
        #                inventTransType = InventTransType::ProdLine;
        #            }
        #            else
        #            {
        #                select firstOnly salesTable
        #                    where   salesTable.SalesId  == refId;
        #
        #                if (salesTable)
        #                {
        #                    inventTransType = InventTransType::Sales;
        #                }
        #            }
        #        }
        #
        #        if (inventTransType == #InventTransTypeUndefined)
        #        {
        #            ok = checkFailed(strFmt("@SYS15067", refId));
        #        }
        #        else
        #        {
        #            bcsInventPickRef = BCSInventPickRef::construct(inventTransType, refId, itemId, inventDimNew);
        #        }
        #    }
        #
        #    return ok && bcsInventPickRef != null;
        #}
      ENDSOURCE
      SOURCE #unpickItem
        #private void unpickItem()
        #{
        #    Common              common;
        #    TmpInventTransWms   tmpInventTransWms;
        #    InventTrans         inventTrans;
        #    InventDim           inventDim;
        #    InventDim           inventDimCriteria;
        #    InventDimParm       inventDimParm;
        #    Qty                 qtyRemaining;
        #    Qty                 qtyUnPick;
        #    LineNum             lineNum;
        #    // <_0082_DRY_BcsPrintPalletLabelOnUnpick> 21.8.2014 RN
        #    WmsPalletId         localPalletId;
        #    // </_0082_DRY_BcsPrintPalletLabelOnUnpick>
        #    ;
        #
        #    setPrintPallets = new Set(types::String);
        #
        #    qtyRemaining    = qty;
        #
        #    inventDimCriteria.data(inventDimNew);
        #    inventDimParm.initFromInventDim(inventDimCriteria);
        #
        #    while select inventTrans
        #        order by InventTransId desc // Make sure the last transaction is unpicked
        #        where   inventTrans.TransType           == inventTransType      &&
        #                inventTrans.TransRefId          == refId                &&
        #                inventTrans.TransChildType      == InventTransChildType::None   &&
        #               (!itemId || inventTrans.itemId   == itemId)              &&
        #                inventTrans.StatusIssue         >= StatusIssue::Picked  &&
        #                inventTrans.StatusReceipt       == StatusReceipt::None
        #        #InventDimJoin(inventTrans.InventDimId, inventDim, inventDimCriteria, inventDimParm)
        #    {
        #        lineNum++;
        #
        #        tmpInventTransWms.LineNum   = lineNum;
        #        tmpInventTransWms.initFromInventTrans(inventTrans);
        #        qtyUnPick = max(qtyRemaining, inventTrans.Qty);
        #        tmpInventTransWms.InventQty     = qtyUnPick;
        #        tmpInventTransWms.InventDimId   = inventTrans.inventDim().inventDimId;
        #        tmpInventTransWms.insert();
        #
        #        // <_0082_DRY_BcsPrintPalletLabelOnUnpick> 21.8.2014 RN
        #        localPalletId = inventTrans.inventDim().wMSPalletId;
        #        // </_0082_DRY_BcsPrintPalletLabelOnUnpick>
        #
        #        common  = bcsInventPickRef.findLineInventTrans(inventTrans);
        #
        #        if (InventTransWMS_Pick::updateInvent(common, tmpInventTransWMS))
        #        {
        #            qtyRemaining = qtyRemaining - qtyUnPick;
        #
        #            // <_0082_DRY_BcsPrintPalletLabelOnUnpick> 21.8.2014 RN
        #            if (localPalletId)
        #            {
        #                setPrintPallets.add(localPalletId);
        #            }
        #            // </_0082_DRY_BcsPrintPalletLabelOnUnpick>
        #        }
        #
        #        if (qtyRemaining >= 0)
        #        {
        #            break;
        #        }
        #    }
        #
        #    if (qtyRemaining != 0)
        #    {
        #        throw error("@ADR526");
        #    }
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean                 ok = super();
        #    InventDimSetup          inventDimSetup;
        #    BcsInventDim            bcsInventDim;
        #    InventDim               inventDim;
        #    InventDimParm           inventDimParmSkip;
        #    InventDimOnHandMember   inventDimOnHandMember;
        #    ;
        #
        #    inventDim.configId          = configId;
        #    inventDim.InventLocationId  = warehouseId;
        #    inventDim.wMSLocationId     = locationId;
        #    inventDim.inventBatchId     = batchId;
        #    inventDim.wMSPalletId       = palletId;
        #
        #    inventDimNew.data(inventDim);
        #
        #    if (this.isEntirePalletPicking())
        #    {
        #        if (!WmsPallet::exist(palletId))
        #        {
        #            ok = checkFailed(strFmt("@SYS60578", palletId));
        #        }
        #    }
        #    else
        #    {
        #        {
        #            // <_0261_BCSInventUnpick> 16.12.2015 RN
        #            if (qty < 0)
        #            {
        #                inventDimParmSkip.InventBatchIdFlag = NoYes::Yes;
        #            }
        #            // </_0261_BCSInventUnpick>
        #            bcsInventDim = new BcsInventDim(itemId, inventDim, qty, inventDimParmSkip);
        #            ok = bcsInventDim.checkUpdateInventDimensions() && ok;
        #
        #            if (ok)
        #            {
        #                inventDimNew.data(bcsInventDim.inventDim());
        #                itemId = bcsInventDim.itemId(); // 26.10.2015 RN: If item ID is not specified then it is resolve from pallet
        #
        #                if (!qty)
        #                {
        #                    qty = bcsInventDim.qty();
        #                }
        #            }
        #        }
        #    }
        #
        #    if (isQtySpecified)
        #    {
        #        // Convert quantity only if the qty was specified (and was not defaulted).
        #        // If the quantity was defaulted then it is considered in inventory unit.
        #        qty = BCSBase::convertQty(itemId, qty, bcsUnitId);
        #    }
        #
        #    // Validate pick reference only if so far ok
        #    ok = ok && bcsInventPickRef.validate();
        #
        #    if (ok)
        #    {
        #        // <_0261_BCSInventUnpick> 4.8.2016 PS
        #        // <OLD>
        #        //if (curExt() == "DCZ")
        #        // </OLD>
        #        if (InventParameters::find().BcsInventPickMovePallet2PickLocation)
        #        // </_0261_BCSInventUnpick>
        #        {
        #            // 8.3.2016 RN: Make sure pallet is in the specified wh/location
        #            // This is not within the main transaction,
        #            // because after pallet is moved InventSum is not correct (InventSum is not updated with InventSumDelta).
        #            // So it has to be called here, which is not a problem because pallet is physically really moved to the new location.
        #            this.checkMovePallet();
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BcsInventDim выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BcsInventDim
    Id 50049
    PROPERTIES
      Name                #BcsInventDim
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #checkFailedDimensionActive
        #private final boolean checkFailedDimensionActive(fieldId _fieldId)
        #{;
        #    return checkFailed(strFmt("@SYS53724", fieldid2pname(tableNum(InventDim), _fieldId)));
        #}
        #
      ENDSOURCE
      SOURCE #checkFailedDimensionInActive
        #private final boolean checkFailedDimensionInActive(fieldId _fieldId)
        #{;
        #    return checkFailed(strFmt("@SYS54773", fieldid2pname(tableNum(InventDim), _fieldId)));
        #}
        #
      ENDSOURCE
      SOURCE #checkUpdateInventDimensions
        #public boolean checkUpdateInventDimensions()
        #{
        #    boolean         ok = true;
        #    InventDimSetup  inventDimSetup;
        #    InventDimParm   inventDimParmLocal;
        #    ;
        #
        #    if (!itemId)
        #    {
        #        this.initItemIdAndItemDim();
        #    }
        #
        #    if (!itemId)
        #    {
        #        ok = checkFailed("@SYS25157");
        #    }
        #
        #    if (ok)
        #    {
        #        inventTable = InventTable::find(itemId);
        #        if (!inventTable)
        #        {
        #            ok = checkFailed(strFmt(InventTable::txtNotExist(), itemId));
        #        }
        #
        #        // <_0261_BCSInventUnpick> 17.12.2015 RN
        #        this.initInventDimParmCheck(inventTable);
        #        // </_0261_BCSInventUnpick>
        #
        #        if (inventDimParmCheck.ConfigIdFlag)
        #        {
        #            if (!inventDim.ConfigId)
        #            {
        #                ok = this.checkFailedDimensionActive(fieldNum(InventDim, ConfigId));
        #            }
        #            else
        #            {
        #                ok = ConfigTable::checkExist(itemId, inventDim.ConfigId) && ok;
        #            }
        #        }
        #
        #        if (inventDimParmCheck.InventSizeIdFlag)
        #        {
        #            if (!inventDim.InventSizeId)
        #            {
        #                ok = this.checkFailedDimensionActive(fieldNum(InventDim, InventSizeId));
        #            }
        #            else
        #            {
        #                ok = InventSize::checkExist(itemId, inventDim.InventSizeId) && ok;
        #            }
        #        }
        #
        #        if (inventDimParmCheck.InventColorIdFlag)
        #        {
        #            if (!inventDim.InventColorId)
        #            {
        #                ok = this.checkFailedDimensionActive(fieldNum(InventDim, InventColorId));
        #            }
        #            else
        #            {
        #                ok = InventColor::checkExist(itemId, inventDim.InventColorId) && ok;
        #            }
        #        }
        #
        #        if (inventDimParmCheck.InventLocationIdFlag)
        #        {
        #            if (!inventDim.InventLocationId)
        #            {
        #                ok = this.checkFailedDimensionActive(fieldNum(InventDim, InventLocationId));
        #            }
        #            else
        #            {
        #                ok = InventLocation::checkExist(inventDim.InventLocationId) && ok;
        #
        #                inventDim.InventSiteId = InventLocation::find(inventDim.InventLocationId).InventSiteId;
        #            }
        #        }
        #        else
        #        {
        #            if (inventDim.InventLocationId)
        #            {
        #                ok = this.checkFailedDimensionInActive(fieldNum(InventDim, InventLocationId));
        #            }
        #        }
        #
        #        // Invent site must be checked after invent location, because it is initiated from invent location
        #        if (inventDimParmCheck.InventSiteIdFlag)
        #        {
        #            if (!inventDim.InventSiteId)
        #            {
        #                ok = this.checkFailedDimensionActive(fieldNum(InventDim, InventSiteId));
        #            }
        #            else
        #            {
        #                ok = InventSite::checkExist(inventDim.InventSiteId) && ok;
        #            }
        #        }
        #        else
        #        {
        #            if (inventDim.WMSLocationId)
        #            {
        #                ok = this.checkFailedDimensionInActive(fieldNum(InventDim, InventSiteId));
        #            }
        #        }
        #
        #        if (inventDimParmCheck.WMSLocationIdFlag)
        #        {
        #            if (!inventDim.WMSLocationId)
        #            {
        #                ok = this.checkFailedDimensionActive(fieldNum(InventDim, WmsLocationId));
        #            }
        #            else
        #            {
        #                if (!WmsLocation::exist(inventDim.WMSLocationId, inventDim.InventLocationId))
        #                {
        #                    ok = checkFailed(strFmt("@GEE32757", inventDim.WMSLocationId));
        #                }
        #            }
        #        }
        #        else
        #        {
        #            if (inventDim.WMSLocationId)
        #            {
        #                ok = this.checkFailedDimensionInActive(fieldNum(InventDim, WmsLocationId));
        #            }
        #        }
        #
        #        if (inventDimParmCheck.WMSPalletIdFlag)
        #        {
        #            if (!inventDim.wMSPalletId)
        #            {
        #                ok = this.checkFailedDimensionActive(fieldNum(InventDim, WmsPalletId));
        #            }
        #            else
        #            {
        #                if (!WmsPallet::exist(inventDim.wMSPalletId))
        #                {
        #                    ok = checkFailed(strFmt("@SYS60578", inventDim.wMSPalletId));
        #                }
        #            }
        #        }
        #        else
        #        {
        #            if (inventDim.wMSPalletId)
        #            {
        #                ok = this.checkFailedDimensionInActive(fieldNum(InventDim, WmsPalletId));
        #            }
        #        }
        #
        #        if (inventDimParmCheck.InventBatchIdFlag)
        #        {
        #            if (!inventDim.InventBatchId && qty >= 0)
        #            {
        #                this.initBatchId();
        #            }
        #
        #            if (!inventDim.InventBatchId)
        #            {
        #                ok = this.checkFailedDimensionActive(fieldNum(InventDim, InventBatchId));
        #            }
        #            else
        #            {
        #                ok = InventBatch::checkExist(itemId, inventDim.InventBatchId) && ok;
        #            }
        #        }
        #        else
        #        {
        #            if (inventDim.InventBatchId)
        #            {
        #                ok = this.checkFailedDimensionInActive(fieldNum(InventDim, InventBatchId));
        #            }
        #        }
        #    }
        #
        #    if (ok && !qty)
        #    {
        #        if (inventDim.wMSPalletId)
        #        {
        #            this.initQty();
        #        }
        #
        #        if (!qty)
        #        {
        #            ok = checkFailed("@SYS78503");
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// <_0034_DRY_BCSInvMovements> 30.3.2014 RN
        #// This class check inventory dimensions for specified item and eventually sets some default values based on specified dimensions.
        #public class BcsInventDim
        #{
        #    // Parameters
        #    ItemId          itemId;
        #    InventDim       inventDimIn;
        #    Qty             qtyIn;
        #    // <_0261_BCSInventUnpick> 17.12.2015 RN
        #    InventDimParm   inventDimParmSkip;  // Specify which dimension should not be checked/initialized
        #    // </_0261_BCSInventUnpick>
        #
        #    // Internal
        #    // <_0261_BCSInventUnpick> 17.12.2015 RN
        #    InventDimParm   inventDimParmCheck;
        #    // </_0261_BCSInventUnpick>
        #
        #    // Result
        #    InventTable inventTable;
        #    InventDim   inventDim;
        #    Qty         qty;
        #}
      ENDSOURCE
      SOURCE #initBatchId
        #private void initBatchId()
        #{
        #    wmsPallet               wmsPallet;
        #    InventDimOnhand         inventDimOnHand;
        #    InventDim               inventDimCriteria;
        #    InventDimParm           inventDimParm;
        #    InventDimParm           inventDimParmOnHandLevel;
        #    InventDimOnHandMember   inventDimOnHandMember;
        #    ;
        #
        #    // If qty == 0 then the line is going to be cancelled, so leave it zero.
        #    //if (qtyLocal > 0 && _wmsPalletId)
        #    if (!inventDim.InventBatchId && inventDim.WMSPalletId)
        #    {
        #        inventDimCriteria.wMSPalletId               = inventDim.wMSPalletId;
        #        inventDimParm.initFromInventDim(inventDimCriteria);
        #
        #        // Init from pallet; only if there is only one item and only one batch on the pallet
        #        inventDimParmOnHandLevel.ItemIdFlag         = NoYes::Yes;
        #        inventDimParmOnHandLevel.InventBatchIdFlag  = NoYes::Yes;
        #
        #        inventDimOnHand = InventDimOnHand::newPhysicalArrived(itemId, inventDimCriteria, inventDimParm, InventDimOnhandLevel::DimParm, inventDimParmOnHandLevel);
        #        if (inventDimOnHand.elements() <= 1)
        #        {
        #            inventDimOnHandMember = inventDimOnHand.firstElement();
        #            if (inventDimOnHandMember)
        #            {
        #                inventDim.inventBatchId = InventDim::find(inventDimOnHandMember.parmInventDimId()).inventBatchId;
        #            }
        #
        #            //wmsPallet   = WmsPallet::find(inventDim.WMSPalletId);
        #            //qty         = wmsPallet.physicalInvent();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #initInventDimParmCheck
        #// <_0261_BCSInventUnpick> 17.12.2015 RN
        #private void initInventDimParmCheck(InventTable _inventTable)
        #{
        #    InventDimParm   inventDimParm;
        #    ;
        #
        #    inventDimParmCheck.initDimActive(_inventTable.DimGroupId);
        #    inventDimParm.data(inventDimParmSkip);
        #    inventDimParm.toggleAllInventDim();
        #    inventDimParmCheck = InventDimParm::andParms(inventDimParmCheck,inventDimParm);
        #}
      ENDSOURCE
      SOURCE #initItemIdAndItemDim
        #// <_0261_BCSInventUnpick> 17.12.2015 RN: Redesigned
        #// 26.10.2015 RN: Requirement by Andrey Samarin
        #// If there is just one item/batch on the pallet then get it from the pallet
        #private void initItemIdAndItemDim()
        #{
        #    InventDimOnHandMember   inventDimOnHandMember;
        #    InventDim               inventDimLocal;
        #    ;
        #
        #    inventDimOnHandMember = WmsPallet::find(inventDim.WmsPalletId).itemDim();
        #    if (inventDimOnHandMember)
        #    {
        #        itemId = inventDimOnHandMember.parmItemId();
        #        if (inventDimOnHandMember.parmInventDimId() != InventDim::inventDimIdBlank())
        #        {
        #            inventDimLocal = InventDim::find(inventDimOnHandMember.parmInventDimId());
        #            if (!inventDim.InventColorId)
        #            {
        #                inventDim.InventColorId = inventDimLocal.InventColorId;
        #            }
        #            if (!inventDim.InventSizeId)
        #            {
        #                inventDim.InventSizeId = inventDimLocal.InventSizeId;
        #            }
        #            if (!inventDim.configId)
        #            {
        #                inventDim.configId = inventDimLocal.configId;
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #initQty
        #private void initQty()
        #{
        #    wmsPallet       wmsPallet;
        #    ;
        #
        #    // If qty == 0 then the line is going to be cancelled, so leave it zero.
        #    //if (qtyLocal > 0 && _wmsPalletId)
        #    if (!qty && inventDim.wMSPalletId)
        #    {
        #        wmsPallet   = WmsPallet::find(inventDim.wMSPalletId);
        #        qty         = wmsPallet.physicalInvent();
        #    }
        #}
      ENDSOURCE
      SOURCE #InventDim
        #public InventDim inventDim()
        #{;
        #    return inventDim;
        #}
      ENDSOURCE
      SOURCE #itemId
        #public ItemId itemId()
        #{;
        #    return itemId;
        #}
      ENDSOURCE
      SOURCE #new
        #void new(
        #    ItemId          _itemId,
        #    InventDim       _inventDim,
        #    Qty             _qty,
        #    InventDimParm   _inventDimParmSkip = null)
        #{;
        #    itemId              = _itemId;
        #    inventDimIn         = _inventDim;
        #    qtyIn               = _qty;
        #    inventDimParmSkip   = _inventDimParmSkip;
        #
        #    // Initialize return values
        #    inventDim.data(inventDimIn);
        #    qty         = qtyIn;
        #}
      ENDSOURCE
      SOURCE #qty
        #public Qty qty()
        #{;
        #    return qty;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSInventCountingFindOrCreateJournal выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSInventCountingFindOrCreateJournal
    Id 50029
    PROPERTIES
      Name                #BCSInventCountingFindOrCreateJournal
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// <_0257_BCSInventCounting> 15.11.2015 RN
        #class BCSInventCountingFindOrCreateJournal extends BCSBase
        #{
        #    // Parameters
        #    InventLocationId        inventLocationId;
        #
        #    // Return values
        #    JournalId               journalId;
        #
        #    // Internal
        #    BCSCountJournalNameId   bcsCountJournalNameId;
        #}
      ENDSOURCE
      SOURCE #createJournal
        #private JournalId createJournal()
        #{
        #    InventJournalTable        journalTable;
        #    InventJournalTableData    journalTableData  = JournalTableData::newTable(journalTable);
        #    ;
        #
        #    journalTable.JournalId      = journalTableData.nextJournalId();
        #    journalTable.JournalType    = InventJournalType::Count;
        #    journalTable.JournalNameId  = bcsCountJournalNameId;
        #
        #    journalTableData.initFromJournalName(journalTableData.journalStatic().findJournalName(journalTable.JournalNameId));
        #
        #    journalTable.EmplId                 = emplId;
        #    journalTable.BCSInventLocationId    = inventLocationId;
        #
        #    journalTable.insert();
        #
        #    return journalTable.JournalId;
        #}
      ENDSOURCE
      SOURCE #findJournal
        #private JournalId findJournal()
        #{
        #    InventJournalTable      inventJournalTable;
        #    ;
        #
        #    select firstOnly inventJournalTable
        #        where   inventJournalTable.Posted               == NoYes::No &&
        #                inventJournalTable.JournalNameId        == bcsCountJournalNameId &&
        #                inventJournalTable.EmplId               == emplId &&
        #                inventJournalTable.BCSInventLocationId  == inventLocationId;
        #
        #    return inventJournalTable.JournalId;
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF21.1';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    // FindOrCreateCountingJournal(
        #    // string TerminlId, DateTime excecDateTime,
        #    // string EmplId, string WarehouseId);
        #
        #    if (bcs2015)
        #    {
        #        [inventLocationId] = this.funcParamCon();
        #    }
        #    else
        #    {
        #        [emplId,
        #         inventLocationId] = this.funcParamCon();
        #    }
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{;
        #    // journal name id
        #    bcsCountJournalNameId = InventParameters::find().BCSCountJournalNameId;
        #    if (!bcsCountJournalNameId)
        #    {
        #        throw error(strFmt("@ADR515",
        #                           fieldid2pname(tableNum(InventParameters), fieldNum(InventParameters, BCSCountJournalNameId)),
        #                           tableid2pname(tableNum(InventParameters))));
        #    }
        #
        #    journalId   = this.findJournal();
        #
        #    if (!journalId)
        #    {
        #        journalId = this.createJournal();
        #    }
        #
        #
        #    if (!journalId)
        #    {
        #        throw error("@ADR516");
        #    }
        #
        #    this.addRetValueCon(journalId);
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean ok = super();
        #    ;
        #
        #    if (!emplId)
        #    {
        #        ok = checkFailed("@SYS24420");
        #    }
        #    else
        #    {
        #        ok = EmplTable::checkExist(emplId) && ok;
        #    }
        #
        #    if (!inventLocationId)
        #    {
        #        ok = checkFailed("@SYS85069");
        #    }
        #    else
        #    {
        #        ok = InventLocation::checkExist(inventLocationId) && ok;
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSInventCountingCreateLine выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSInventCountingCreateLine
    Id 50047
    PROPERTIES
      Name                #BCSInventCountingCreateLine
      Extends             #BCSBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #checkCreateLine
        #// <_0257_BCSInventCounting> 8.11.2015 RN
        #private void checkCreateLine()
        #{
        #    InventJournalTrans      journalTrans;
        #    InventDim               inventDim;
        #    ;
        #
        #    if (bcs2015 && palletId)
        #    {
        #        if (this.checkPalletExists())
        #        {
        #            this.addRetValueCon(BcsInventCountingStatus::ConfirmationRequired);
        #        }
        #        else
        #        {
        #            delete_from journalTrans
        #                where   journalTrans.JournalId  == journalId
        #                exists join inventDim
        #                where   inventDim.inventDimId   == journalTrans.InventDimId &&
        #                        inventDim.wMSPalletId   == palletId;
        #
        #            this.createPalletLines();
        #            this.addRetValueCon(BcsInventCountingStatus::OK);
        #        }
        #    }
        #    else
        #    {
        #        if (!itemId)
        #        {
        #            throw error("@SYS25157");
        #        }
        #
        #        qtyCounted = BCSBase::convertQty(itemId, qtyCounted, bcsUnitId);
        #
        #        inventDim.InventSiteId      = InventLocation::find(inventLocationId).InventSiteId;
        #        inventDim.InventLocationId  = inventLocationId;
        #        inventDim.wMSLocationId     = wmsLocationId;
        #        inventDim.inventBatchId     = batchId;
        #        inventDim.wMSPalletId       = palletId;
        #        inventDim                   = InventDim::findOrCreate(inventDim);
        #
        #        this.createLine(itemId,inventDim,qtyCounted);
        #    }
        #}
      ENDSOURCE
      SOURCE #checkPalletExists
        #// <_0257_BCSInventCounting> 8.11.2015 RN
        #private boolean checkPalletExists()
        #{
        #    InventJournalTrans      journalTrans;
        #    InventDim               inventDim;
        #    ;
        #
        #    if (palletId &&
        #        confirmation == BcsInventCountingConfirmation::CheckConfirmation)
        #    {
        #        select firstOnly journalTrans
        #            where   journalTrans.JournalId  == journalId
        #            join    inventDim
        #            where   inventDim.inventDimId   == journalTrans.InventDimId &&
        #                    inventDim.wMSPalletId   == palletId;
        #    }
        #
        #    return journalTrans.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// <_0257_BCSInventCounting> 15.11.2015 RN
        #public class BCSInventCountingCreateLine extends BCSBase
        #{
        #    // Parameters
        #    InventJournalId         journalId;
        #    ItemId                  itemId;
        #    WmsPalletId             palletId;
        #    InventBatchId           batchId;
        #    InventLocationId        inventLocationId;
        #    WmsLocationId           wmsLocationId;
        #    Qty                     qtyCounted;
        #
        #    // <_0257_BCSInventCounting> 8.11.2015 RN
        #    BcsUnitId                           bcsUnitId;
        #    WMSPalletBlockingCodeID             palletBlockingCodeId;
        #    BcsInventCountingConfirmation       confirmation;
        #    // </_0257_BCSInventCounting>
        #
        #    // Internal
        #    InventJournalTable      journalTable;
        #}
      ENDSOURCE
      SOURCE #createLine
        #private void createLine(
        #    ItemId      _itemId,
        #    InventDim   _inventDim,
        #    Qty         _qtyCounted)
        #{
        #    InventJournalTrans      journalTrans;
        #    InventJournalTableData  journalTableData  = JournalTableData::newTable(journalTable);
        #    InventJournalTransData  journalTransData  = journalTableData.journalStatic().newJournalTransData(journalTrans,journalTableData);
        #    ;
        #
        #    select firstonly forUpdate journalTrans
        #        where   journalTrans.JournalId      == journalId &&
        #                journalTrans.ItemId         == _itemId   &&
        #                journalTrans.InventDimId    == _inventDim.inventDimId;
        #
        #    if (journalTrans)
        #    {
        #        journalTrans.EmplId     = emplId;
        #        journalTrans.BCSScanned = NoYes::Yes;
        #        journalTrans.Counted    = _qtyCounted;
        #
        #        // <_0257_BCSInventCounting> 8.11.2015 RN
        #        this.setPalletBlockingCode(journalTrans);
        #        // </_0257_BCSInventCounting>
        #
        #        // This will set on-hand qty and qty
        #        journalTrans.inventMovement().journalSetInventDimField(_inventDim, fieldNum(InventDim, InventSiteId));
        #        if (_qtyCounted == 0)
        #        {
        #            journalTrans.inventMovement().journalSetCounted();
        #        }
        #
        #        journalTrans.setCostPrice();
        #
        #        journalTrans.inventMovement().journalSetCounted();
        #
        #        journalTrans.update();
        #    }
        #    else
        #    {
        #        journalTrans.clear();
        #        journalTransData.initFromJournalTable();
        #        journalTrans.TransDate      = systemdateget();
        #        journalTrans.ItemId         = _itemId;
        #        journalTrans.initFromInventTable(InventTable::find(_itemId), false, false, false);
        #        journalTrans.EmplId         = emplId;
        #        journalTrans.BCSScanned     = NoYes::Yes;
        #        journalTrans.Counted        = _qtyCounted;
        #
        #        // <_0257_BCSInventCounting> 8.11.2015 RN
        #        this.setPalletBlockingCode(journalTrans);
        #        // </_0257_BCSInventCounting>
        #
        #        //journalTrans.setInventDimId(inventDim.inventDimId); // This updates linked fin. dim. from invent site if set so
        #
        #        // This will set inventDim (incl. update fin. dim. fron site), on-hand qty, qty adn set cost price
        #        journalTrans.inventMovement().journalSetInventDimField(_inventDim, fieldNum(InventDim, InventSiteId));
        #        // If counted is different from zero then the method journalSetCounted is called as part of the above method journalSetInventDimField.
        #        if (_qtyCounted == 0)
        #        {
        #            journalTrans.inventMovement().journalSetCounted();
        #        }
        #
        #        // Method setCostPrice is called as part of the above method.
        #        //journalTrans.setCostPrice();
        #
        #        journalTransData.parmLastLineNum(InventJournalTrans::lastLineNum(journalId));
        #
        #        journalTransData.create();
        #
        #        journalTable.update();
        #    }
        #}
      ENDSOURCE
      SOURCE #createPalletLines
        #private void createPalletLines()
        #{
        #    InventDimOnhand         inventDimOnHand;
        #    InventDim               inventDimCriteria;
        #    InventDimParm           inventDimParm;
        #    InventDimParm           inventDimParmOnHandLevel;
        #    InventDimOnHandMember   inventDimOnHandMember;
        #    SetEnumerator           se;
        #    InventDim               inventDim;
        #    InventBatchId           batchIdLast;
        #    ItemId                  itemIdLocal;
        #    ItemId                  itemIdOld;
        #    Qty                     qty;
        #    Qty                     qtyLast;
        #    Qty                     qtyRemaining;
        #    boolean                 convertQty;
        #    ;
        #
        #    convertQty = true;
        #
        #    if (!batchId)
        #    {
        #        inventDimCriteria.wMSPalletId = palletId;
        #        inventDimParm.initFromInventDim(inventDimCriteria);
        #
        #        // Init from pallet; only if there is only one item and only one batch on the pallet
        #        //inventDimParmOnHandLevel.InventBatchIdFlag  = NoYes::Yes;
        #        inventDimParmOnHandLevel.initItemDimAllGrp();
        #        inventDimParmOnHandLevel.initStorageDimAllGrp();
        #        inventDimParmOnHandLevel.ItemIdFlag         = NoYes::Yes;
        #
        #        inventDimOnHand = InventDimOnHand::newPhysicalArrived(itemId, inventDimCriteria, inventDimParm, InventDimOnhandLevel::DimParm, inventDimParmOnHandLevel);
        #        if (inventDimOnHand.elements() > 0)
        #        {
        #            se = inventDimOnHand.getEnumerator();
        #            while (se.moveNext())
        #            {
        #                inventDimOnHandMember = se.current();
        #                if (inventDimOnHandMember)
        #                {
        #                    itemIdLocal     = inventDimOnHandMember.parmItemId();
        #
        #                    if (itemIdOld && itemIdLocal != itemIdOld)
        #                    {
        #                        throw error("@ADR513");
        #                    }
        #
        #                    if (convertQty)
        #                    {
        #                        // At this moment item is known -> conversion may be calculated
        #                        qtyCounted      = BCSBase::convertQty(itemIdLocal, qtyCounted, bcsUnitId);
        #                        qtyRemaining    = qtyCounted;
        #                        convertQty      = false;
        #                    }
        #
        #                    inventDim       = InventDim::find(inventDimOnHandMember.parmInventDimId());
        #
        #                    // Set specified warehouse/location
        #                    inventDim.InventLocationId  = inventLocationId;
        #                    inventDim.wMSLocationId     = wmsLocationId;
        #
        #                    qtyLast         = inventDimOnHandMember.parmInventQty();
        #                    qty             = min(qtyRemaining,qtyLast);
        #
        #                    this.createLine(itemIdLocal,inventDim,qty);
        #
        #                    qtyRemaining    = qtyRemaining - qty;
        #                    itemIdOld       = itemIdLocal;
        #                }
        #            }
        #
        #            // If counted qty is more then on the pallet then add it to the last batch
        #            if (qtyRemaining)
        #            {
        #                this.createLine(itemIdLocal,inventDim,qtyLast + qtyRemaining);
        #            }
        #        }
        #        else
        #        {
        #            throw error("@ADR514");
        #        }
        #    }
        #    else
        #    {
        #        // If batch is specified then also item id must be specified
        #        if (!itemId)
        #        {
        #            throw error("@GEE34935");
        #        }
        #
        #        inventDim.wMSPalletId       = palletId;
        #        inventDim.InventSiteId      = InventLocation::find(inventLocationId).InventSiteId;
        #        inventDim.InventLocationId  = inventLocationId;
        #        inventDim.wMSLocationId     = wmsLocationId;
        #        inventDim.inventBatchId     = batchId;
        #        inventDim = InventDim::findOrCreate(inventDim);
        #
        #        this.createLine(itemId,inventDim,qtyCounted);
        #    }
        #}
      ENDSOURCE
      SOURCE #findJournal
        #private void findJournal()
        #{;
        #    select firstOnly forUpdate journalTable
        #        where   journalTable.JournalType    == InventJournalType::Count &&
        #                journalTable.JournalId      == journalId;
        #
        #    if (!journalTable)
        #    {
        #        throw error(strFmt("@ADR195", journalId));
        #    }
        #
        #    if (journalTable.Posted)
        #    {
        #        throw error(strFmt("@SYS18421", journalId));
        #    }
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #public str funcIdStr()
        #{;
        #    return 'SF21.2';
        #}
      ENDSOURCE
      SOURCE #initParams
        #protected void initParams()
        #{;
        #    super();
        #
        #    // FindOrCreateCountingJournal(
        #    // string TerminlId, DateTime excecDateTime,
        #    // string EmplId, string WarehouseId);
        #
        #    // CreateCountingJournalLine(
        #    // string TerminlId, DateTime excecDateTime,
        #    // string JournalId, string ItemId, string PalletId, string BatchId, string WarehouseId, string LocationId, double Quantity
        #
        #    if (bcs2015)
        #    {
        #        [journalId,
        #         itemId,
        #         palletId,
        #         batchId,
        #         inventLocationId,
        #         wmsLocationId,
        #         qtyCounted,
        #         bcsUnitId,
        #         palletBlockingCodeId,
        #         confirmation] = this.funcParamCon();
        #    }
        #    else
        #    {
        #        [journalId,
        #         itemId,
        #         palletId,
        #         batchId,
        #         inventLocationId,
        #         wmsLocationId,
        #         qtyCounted] = this.funcParamCon();
        #    }
        #
        #    // <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #    palletId = BCSBase::decodePalletId(conPeek(this.funcParamCon(), 3));
        #    // </_DRY_0078_BCSGS1Code128AIHandling>
        #
        #    // Get warehouse/location from scanned location
        #    [inventLocationId, wmsLocationId] = BcsBase::wmsWhLocSplit(conPeek(this.funcParamCon(), 6), inventLocationId);
        #}
      ENDSOURCE
      SOURCE #palletId
        #// <_0340_BcsLogPalletId> 19.6.2016 PESE
        #protected WMSPalletId palletId()
        #{;
        #    return palletId;
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{;
        #    this.findJournal();
        #
        #    // <_0257_BCSInventCounting> 8.11.2015 RN
        #    // <OLD>
        #    //this.createLine();
        #    // </OLD>
        #    this.checkCreateLine();
        #    // </_0257_BCSInventCounting>
        #}
      ENDSOURCE
      SOURCE #setPalletBlockingCode
        #// <_0257_BCSInventCounting> 8.11.2015 RN
        #private void setPalletBlockingCode(InventJournalTrans _journalTrans)
        #{;
        #    if (bcs2015)
        #    {
        #        _journalTrans.WMSPalletBlockingCodeID = palletBlockingCodeID;
        #    }
        #    else
        #    {
        #        if (palletId)
        #        {
        #            _journalTrans.WMSPalletBlockingCodeID = WmsPallet::find(palletId).WMSPalletBlockingCodeID;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #validateParams
        #protected boolean validateParams()
        #{
        #    boolean         ok = super();
        #    /*
        #    BcsInventDim    bcsInventDim;
        #    InventDim       inventDim;
        #    InventDim       inventDimNew;
        #    */
        #    ;
        #
        #    if (!journalId)
        #    {
        #        ok = checkFailed("@ADR168");
        #    }
        #    else
        #    {
        #        ok = InventJournalTable::checkExist(journalId) && ok;
        #    }
        #
        #    /*
        #    inventDim.InventLocationId  = inventLocationId;
        #    inventDim.wMSLocationId     = wmsLocationId;
        #    inventDim.inventBatchId     = batchId;
        #    inventDim.wMSPalletId       = palletId;
        #
        #    bcsInventDim = new BcsInventDim(itemId, inventDim, qtyCounted);
        #    ok = bcsInventDim.checkUpdateInventDimensions() && ok;
        #
        #    if (ok)
        #    {
        #        inventDimNew.data(bcsInventDim.inventDim());
        #        batchId = inventDimNew.inventBatchId;
        #
        #        itemId  = bcsInventDim.itemId(); // 26.10.2015 RN: If item ID is not specified then it is resolved from pallet
        #    }
        #    */
        #
        #    return ok;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: BCSBase выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #BCSBase
    Id 50042
    PROPERTIES
      Name                #BCSBase
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #addRetValueCon
        #protected final void addRetValueCon(anyType _value)
        #{;
        #    retValueCon  = retValueCon + [_value];
        #}
        #
      ENDSOURCE
      SOURCE #baseParamCon
        #protected final container baseParamCon()
        #{;
        #    return conDel(inputParam, (bcs2015 ? 5 : 3) + 1, maxint());
        #}
        #
      ENDSOURCE
      SOURCE #checkEmplAccess
        #private boolean checkEmplAccess()
        #{
        #    boolean ok = true;
        #    ;
        #
        #    if (BcsEmplAccess::access(emplId,funcId) == BcsFunctionAccess::No)
        #    {
        #        ok = checkFailed(strFmt("@ADR442",emplId,funcId));
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class BCSBase
        #{
        #    #define.userExceptionPrefix('*')
        #
        #    // Parameters (container)
        #    InventBarcodeReaderIntefaceInputParam   inputParam;
        #
        #    // Common parameters parsed from inputParam container
        #    InventBarcodeReaderInterfaceFunction    funcId;
        #    InventBRTerminalId                      terminalId;
        #    str                                     execDateTimeStr;
        #    UtcDateTime                             execDateTime;
        #    EmplId                                  emplId;         // This is derived from emplPIN
        #
        #    // Return value
        #    container                               retValueCon;    // This is only function specific return value
        #    str                                     retValue;       // This is the return value incl. envelope
        #
        #    // Log
        #    InventBarcodeReaderWSInterfaceLog       log;
        #    boolean                                 exceptionCaughtDuringProcess;
        #    boolean                                 exceptionCaughtDuringPostProcess;
        #
        #    // <_0259_BCS_2015> 20.10.2015 RN
        #    boolean                                 bcs2015;
        #    LanguageId                              langId;
        #    BSCEmplPIN                              emplPIN;
        #    BSCEmplPIN                              emplPINCoded;
        #    LanguageId                              langIdSaved;
        #    // </_0259_BCS_2015>
        #}
      ENDSOURCE
      SOURCE #composeRetValue
        #protected final void composeRetValue()
        #{
        #    container   con;
        #    List        retValueList;   // This is the return value incl. envelope
        #    ;
        #
        #    con = this.initRetValue() +
        #          (exceptionCaughtDuringProcess ? ['Failed'] : ['OK']) +
        #          retValueCon;
        #
        #    // Initialize return list
        #    retValueList = new List(Types::String);
        #
        #    retValue    = InventBarcodeReaderWSInterface::convertToCVSString(con, conlen(con));
        #
        #    // <BCSRemoveDiacritics> 21.9.2016 PS
        #    // Just do it here in one place;
        #    // There is no need to call the method Global::str2StrNoDiactinism for each string that is being inserted into retValueCon.
        #    // What more the Global::str2StrNoDiactinism() method converts the string to upper cases ... call instead a new method that does just what is expected by it's name!
        #    //retValue    = Global::str2StrNoDiactinism(retValue);
        #    retValue    = Global::strRemoveDiacritics(retValue);
        #    // </BCSRemoveDiacritics>
        #
        #    retValueList.addEnd(retValue);
        #
        #    // Create return value (XML)
        #    retValue = retValueList.xml();
        #}
        #
      ENDSOURCE
      SOURCE #decodeBase64
        #// <_0259_BCS_2015> 3.11.2015 RN
        #private str decodeBase64(str _strBase64)
        #{
        #    str                     s;
        #    System.Byte[]           byteArr;
        #    System.Text.Encoding    utf8;
        #    ;
        #
        #    byteArr = System.Convert::FromBase64String(_strBase64);
        #
        #    utf8 = System.Text.Encoding::get_UTF8();
        #    s = utf8.GetString(byteArr);
        #
        #    return s;
        #}
      ENDSOURCE
      SOURCE #decodeEAN128Barcode
        #// <_0078_DRY_BCSGS1Code128AIHandling> 29.5.2014 RN
        #// return value: [itemId, palletId, batchId, qty]
        #protected container decodeEAN128Barcode(
        #    BarCodeString   _barcodeStr,
        #    ItemId          _itemId,
        #    WmsPalletId     _palletId,
        #    InventBatchId   _batchId,
        #    Qty             _qty)
        #{
        #    BarcodeEAN128   barcodeGS1;
        #    ItemId          itemIdLocal;
        #    Qty             qtyLocal;
        #    InventBatchId   batchIdLocal;
        #    WmsPalletId     palletIdLocal;
        #    InventItemGTIN  inventItemGTIN;
        #    BarCodeString   barCodeStr;
        #    ;
        #
        #    // TODO: Find out if it is GS1 barcode
        #    if (strlen(_barcodeStr) > 15)
        #    {
        #        barCodeStr = this.preprocessEAN128Barcode(_barcodeStr);
        #
        #        barcodeGS1 = BarcodeEAN128::construct();
        #        if (barcodeGS1.validateBarcode(barCodeStr))
        #        {
        #            barcodeGS1.decode(barCodeStr);
        #
        #            itemIdLocal     = barcodeGS1.itemId();
        #            if (!itemIdLocal)
        #            {
        #                itemIdLocal = barcodeGS1.itemId(false, "", true);
        #
        #                if (!itemIdLocal)
        #                {
        #                    itemIdLocal     = barcodeGS1.internalItemId();
        #                }
        #                else
        #                {
        #                    inventItemGTIN = barcodeGS1.getItemInfoGTIN(true);
        #                }
        #            }
        #            else
        #            {
        #                inventItemGTIN = barcodeGS1.getItemInfoGTIN();
        #            }
        #
        #            qtyLocal        = barcodeGS1.qty();
        #            if (!qtyLocal)
        #            {
        #                qtyLocal    = barcodeGS1.subQty();
        #            }
        #
        #            batchIdLocal    = barcodeGS1.batch();
        #            palletIdLocal   = barcodeGS1.SSCC();
        #
        #            if (itemIdLocal)
        #            {
        #                if (_itemId)
        #                {
        #                    if (_itemId != itemIdLocal)
        #                    {
        #                        throw error("@ADR443");
        #                    }
        #                }
        #                else
        #                {
        #                    _itemId  = itemIdLocal;
        #                }
        #            }
        #
        #            _batchId = batchIdLocal;
        #
        #            if (palletIdLocal)
        #            {
        #                if (_palletId)
        #                {
        #                    if (_palletId != palletIdLocal)
        #                    {
        #                        throw error("@ADR444");
        #                    }
        #                    else
        #                    {
        #                        _palletId = palletIdLocal;
        #                    }
        #                }
        #            }
        #
        #            if (!_qty && qtyLocal)
        #            {
        #                // TODO RN: Take over the quantity from GS1 barcode?
        #                _qty = qtyLocal;
        #
        #                if (inventItemGTIN && inventItemGTIN.UnitId)
        #                {
        #                    _qty = UnitConvert::qty(_qty, InventTable::find(_itemId).inventUnitId(), inventItemGTIN.UnitId, _itemId);
        #                }
        #            }
        #        }
        #    }
        #
        #    return [_itemId, _palletId, _batchId, _qty];
        #}
      ENDSOURCE
      SOURCE #devDocu
        #protected final void devDocu(container _resultLineCon)
        #{
        #    /*
        #    // SF21.1
        #    string[] FindOrCreateCountingJournal(string TerminlId, DateTime excecDateTime, string EmplId, string WarehouseId);
        #
        #    // SF21.2
        #    string[] CreateCountingJournalLine(string TerminlId, DateTime excecDateTime, string JournalId, string ItemId, string PalletId, string BatchId, string WarehouseId, string LocationId, double Quantity);
        #
        #    // SF30.1
        #    string[] PickingListPicking(string TerminlId, DateTime excecDateTime, string PickingListId, string InventTransId, string ItemId, string ConfigID, string WarehouseId, string LocationId, string PalletId, string BatchId, double Quantity);
        #
        #    // SF31.1
        #    string[] RegisterInventory(string TerminlId, DateTime excecDateTime, string InventRefType, string InventRefId, string ItemId, string ConfigID, string WarehouseId, string LocationId, string PalletId, string BatchId, double Quantity);
        #
        #    // SF20.1
        #    string[] IssueMaterialForMaintenance(string TerminlId, DateTime excecDateTime, string EmplId, string ItemId, string LocationId, string CostCenter, double Quantity);
        #
        #    Adresa naší služby:
        #    http://10.1.1.35:8090/BarcodeReaderWebService.svc
        #
        #    Adresa vaší testovací aplikace:
        #    http://10.1.1.35/InCAPTIO_TEST_CZ/Default.aspx?TermID=term7
        #    */
        #}
        #
      ENDSOURCE
      SOURCE #exceptionPostProcess
        #private void exceptionPostProcess()
        #{;
        #    exceptionCaughtDuringPostProcess = true;
        #}
      ENDSOURCE
      SOURCE #exceptionProcess
        #private void exceptionProcess()
        #{
        #    str infologText;
        #    ;
        #
        #    exceptionCaughtDuringProcess = true;
        #
        #    infologText = #userExceptionPrefix + Global::GetTextFromInfoLog(infolog.infologData());
        #
        #    // Replace the return value container with infolog text
        #    retValueCon = conNull();
        #    retValueCon = [infologText];
        #}
      ENDSOURCE
      SOURCE #funcIdStr
        #protected str funcIdStr()
        #{;
        #    throw error(Error::missingOverride(funcName()));
        #}
        #
      ENDSOURCE
      SOURCE #funcParamCon
        #protected final container funcParamCon()
        #{;
        #    return conDel(inputParam, 1, bcs2015 ? 5 : 3);
        #}
        #
      ENDSOURCE
      SOURCE #getRetValue
        #public str getRetValue()
        #{;
        #    return retValue;
        #}
        #
      ENDSOURCE
      SOURCE #initParams
        #// Initializes parameters from input container
        #protected void initParams()
        #{;
        #}
        #
      ENDSOURCE
      SOURCE #initParamsBase
        #// Initializes common parameters from input container
        #private void initParamsBase()
        #{
        #    BcsEmplTable    bcsEmplTable;
        #    ;
        #
        #    funcId          = BCSBase::getFunction(inputParam);
        #    terminalId      = conPeek(inputParam, 2);
        #    execDateTimeStr = conPeek(inputParam,3);
        #    execDateTime    = str2datetime(execDateTimeStr,123);
        #    if (!execDateTime)
        #    {
        #        execDateTime = DateTimeUtil::newDateTime(today(), timeNow());
        #    }
        #
        #    if (bcs2015)
        #    {
        #        langId          = conPeek(inputParam,4);
        #
        #        langIdSaved     = infolog.language();
        #
        #        if (LanguageTable::find(langId).RecId)
        #        {
        #            infolog.language(langId);
        #        }
        #        else
        #        {
        #            warning(strFmt("@ADR445",langId));
        #        }
        #
        #        emplPINCoded    = conPeek(inputParam,5);
        #        emplPIN         = this.decodeBase64(emplPINCoded);
        #        bcsEmplTable    = BcsEmplTable::findPIN(emplPIN);
        #        if (!bcsEmplTable)
        #        {
        #            throw error(strFmt("@ADR446",emplPINCoded));
        #        }
        #
        #        emplId          = bcsEmplTable.EmplId;
        #
        #        this.checkEmplAccess();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #initRetValue
        #private final container initRetValue()
        #{
        #    container   con;
        #    ;
        #
        #    con =  [this.funcIdStr()];              // function
        #    con += conpeek(inputParam, 2);          // terminal
        #
        #    //con += DateTimeUtil::toStr(conpeek(inputParam, 3)); // datetime
        #    con += any2str(conpeek(inputParam, 3)); // datetime
        #
        #    return con;
        #}
        #
      ENDSOURCE
      SOURCE #palletId
        #// This method returns pallet ID for log.
        #protected WmsPalletId palletId()
        #{
        #    return "";
        #}
      ENDSOURCE
      SOURCE #parmBcs2015
        #public Boolean parmBcs2015(Boolean _bcs2015 = bcs2015)
        #{;
        #    bcs2015 = _bcs2015;
        #
        #    return bcs2015;
        #}
        #
      ENDSOURCE
      SOURCE #parmInputParam
        #public Container parmInputParam(Container _inputParam = inputParam)
        #{;
        #    inputParam = _inputParam;
        #
        #    return inputParam;
        #}
        #
      ENDSOURCE
      SOURCE #postProcess
        #protected void postProcess()
        #{;
        #}
        #
      ENDSOURCE
      SOURCE #preprocessEAN128Barcode
        #final protected BarCodeString preprocessEAN128Barcode(barCodeString _barcodeStr)
        #{
        #    BarCodeString   barCodeStr = _barCodeStr;
        #    ;
        #
        #    barcodeStr  = Global::strReplace(barCodeStr, "~", "~f");
        #
        #    return barCodeStr;
        #}
      ENDSOURCE
      SOURCE #printPalletLabel
        #protected void printPalletLabel(WMSPalletId _palletId)
        #{
        #    // <_PS_VYN_IMA02_PrintPalletLabel> 18.10.2012 PESE
        #    // <OLD>
        #    //Args                args = new Args(reportstr(WMSPalletNumber));
        #    // </OLD>
        #    Args                        args = new Args();
        #    WMSPalletNumberDispatcher_W wmsPalletNumberDispatcher_W;
        #    ReportFormat_W              reportFormat;
        #    // </_PS_VYN_IMA02_PrintPalletLabel>
        #
        #    SysReportRun        rr;
        #    RunbaseReportStd    rbr   = new RunbaseReportStd();
        #    TerminalTable       terminalTable = TerminalTable::find(terminalId);
        #
        #    FileName            fileName;
        #    FilePath            filePath;
        #    FileName            fileExt;
        #
        #    // TODO RN
        #    boolean             printLog = false;
        #
        #    void insertPrintLog(str _id)
        #    {;
        #        if (printLog)
        #        {
        #            BcsPrintLog::insertLog(
        #                terminalTable.TerminalId,
        #                reportFormat,
        #                terminalTable.PalletLabelPrinterSettings,
        #                rbr.printJobSettings().getTarget(),
        #                rbr.printJobSettings().fileName(),
        #                rbr.printJobSettings().printerPrinterName(),
        #                _id);
        #        }
        #    }
        #    ;
        #
        #    // <_DRY_BCTerminalPalletLabel> RN 3.1.2013
        #    /*
        #    // <_PS_VYN_IMA02_PrintPalletLabel> 18.10.2012 PESE
        #    wmsPalletNumberDispatcher_W = WMSPalletNumberDispatcher_W::construct();
        #    args.name(wmsPalletNumberDispatcher_W.getReportName());
        #    reportFormat = CustFormletterParameters::find().ReportFormatWMSPalletNumber_W;
        #    // </_PS_VYN_IMA02_PrintPalletLabel>
        #    */
        #    reportFormat    = CompanyInfo::features_W() == CRSEFeatures_W::RU
        #                    ? terminalTable.ReportFormat
        #                    : CustFormletterParameters::find().ReportFormatWMSPalletNumber_W;
        #    wmsPalletNumberDispatcher_W = WMSPalletNumberDispatcher_W::construct(reportFormat);
        #    args.name(wmsPalletNumberDispatcher_W.getReportName());
        #    // </_DRY_BCTerminalPalletLabel>
        #
        #    if (!terminalTable.PalletLabelPrinterSettings
        #        // <_PS_VYN_IMA02_PrintPalletLabel> 18.10.2012 PESE
        #        || terminalTable.ReportFormat != reportFormat)
        #        // </_PS_VYN_IMA02_PrintPalletLabel>
        #    {
        #        throw error(strFmt("@DRC87", terminalId, reportFormat));
        #    }
        #
        #    args.caller(this);
        #    args.record(WMSPallet::find(_palletId));
        #    rr = new SysReportRun(args);
        #    rr.init();
        #
        #    rbr.initReportRun(rr);
        #    rbr.unpack(terminalTable.PalletLabelPrinterSettings);
        #
        #    // TODO RN
        #    insertPrintLog("1");
        #
        #    if (rbr.printJobSettings().getTarget() == PrintMedium::File)
        #    {
        #        // RN: Create unique file name
        #        fileName    = rbr.printJobSettings().fileName();
        #        [filePath, fileName, fileExt] = global::fileNameSplit(fileName);
        #        fileName    = filePath + fileName + strFmt("_%1_%2%3", _palletId, date2Str(today(),321,2,0,2,0,2), strKeep(time2str(timeNow(),3,3),"0123456789")) + fileExt;
        #        rbr.printJobSettings().fileName(fileName);
        #    }
        #
        #    global::findOrCreateRange_W(rbr.queryRun().query().dataSourceTable(tableNum(WMSPallet)), fieldNum(WMSPallet, WmspalletId), SysQuery::value(_palletId));
        #
        #    // TODO RN
        #    insertPrintLog("2");
        #
        #    rbr.run();
        #
        #    // TODO RN
        #    insertPrintLog("3");
        #}
      ENDSOURCE
      SOURCE #process
        #protected void process()
        #{;
        #    throw error(Error::missingOverride(funcName()));
        #}
        #
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{;
        #    try
        #    {
        #        // Initialize parameters from input container
        #
        #        this.initParamsBase();  // common parameters
        #
        #        this.initParams();      // function specific parameters
        #
        #        if (!this.validateParams())
        #        {
        #            throw error("@SYS107512");
        #        }
        #
        #        ttsBegin;
        #
        #        this.process();
        #
        #        ttsCommit;
        #    }
        #    catch
        #    {
        #        this.exceptionProcess();
        #    }
        #
        #    this.composeRetValue();
        #
        #    if (!exceptionCaughtDuringProcess)
        #    {
        #        // Post processing, f.e. printing
        #        try
        #        {
        #            this.postProcess();
        #        }
        #        catch
        #        {
        #            this.exceptionPostProcess();
        #        }
        #    }
        #
        #    // writeLog
        #    this.writeLog();
        #
        #    if (langIdSaved)
        #    {
        #        infolog.language(langIdSaved);
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #validateParams
        #// Initializes common parameters from input container
        #protected boolean validateParams()
        #{
        #    boolean ok = true;
        #    ;
        #
        #    if (!terminalId)
        #    {
        #        ok = checkFailed("@ADR161");
        #    }
        #    else
        #    {
        #        ok = TerminalTable::checkExist(terminalId);
        #    }
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #writeLog
        #void writeLog()
        #{;
        #    log.InventBarcodeReaderInterfaceFunction = funcId;
        #    log.InputParam          = inputParam;
        #    log.TerminalId          = terminalId;
        #
        #    log.StringDateTime      = execDateTimeStr;
        #    log.ExecutionDateTime   = execDateTime;
        #
        #    // <_0259_BCS_2015> 20.10.2015 RN
        #    log.LanguageId          = langId;
        #    log.EmplId              = emplId;
        #    // </_0259_BCS_2015>
        #
        #    log.ErrorLog            = exceptionCaughtDuringProcess ? NoYes::Yes : NoYes::No;
        #    log.PostProcessError    = exceptionCaughtDuringPostProcess ? NoYes::Yes : NoYes::No;
        #    log.InfologData         = infolog.infologData();
        #    log.ReturnValue         = retValue;
        #    log.PalletId            = this.palletId();
        #    log.insert();
        #}
      ENDSOURCE
      SOURCE #call
        #// <_0259_BCS_2015> 20.10.2015 RN
        #// 1 - FuncID
        #// 2 - TerminalId
        #// 3 - ExecutionDateTime
        #// 4 - LangId
        #// 5 - EmplId
        #// 6 - Function specific parameters
        #static str call(container _con)
        #{
        #    BCSBase bcsBase;
        #    ;
        #
        #    bcsBase = BCSBase::construct(_con);
        #    bcsBase.parmBcs2015(true);
        #
        #    bcsBase.run();
        #
        #    return bcsBase.getRetValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #static BCSBase construct(container _inputParam)
        #{
        #    BCSBase bcsBase;
        #    ;
        #
        #    switch (BCSBase::getFunction(_inputParam))
        #    {
        #        // <_0259_BCS_2015> 20.10.2015 RN
        #        case InventBarcodeReaderInterfaceFunction::LogAsUser:
        #            bcsBase = new BCSLogin();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::PalletInfo:
        #            bcsBase = new BCSPalletInfo();
        #            break;
        #        // </_0259_BCS_2015>
        #
        #        // <_DRY_0071_PalletMoveBlocked> 23.4.2013 RN
        #        case InventBarcodeReaderInterfaceFunction::PalletMove:
        #            bcsBase = new BCSPalletMove();
        #            break;
        #        // </_DRY_0071_PalletMoveBlocked>
        #
        #        case InventBarcodeReaderInterfaceFunction::InventPick: // 41B
        #            bcsBase = new BCSInventPick();
        #            break;
        #
        #        // <_0080_HTC_BCSSimpleInvPicking> 16.6.2014 RN
        #        case InventBarcodeReaderInterfaceFunction::PickingRoutePick: // 41A
        #            bcsBase = new BCSPickingRoutePick();
        #            break;
        #        // </_0080_HTC_BCSSimpleInvPicking>
        #
        #        case InventBarcodeReaderInterfaceFunction::InventRegister: // 42
        #            bcsBase = new BCSInventRegister();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::InventConsumption: // 40
        #            bcsBase = new BCSIssueMaterialForMaintenance();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::InventCountJournal: // 43
        #            bcsBase = new BCSInventCountingFindOrCreateJournal();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::InventCountLine: // 44
        #            bcsBase = new BCSInventCountingCreateLine();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::PalletRegistration:
        #            bcsBase = new BcsProdRegisterPallet();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::BlockingCodeList:
        #            bcsBase = new BcsPalletBlockingCodeList();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::BlockPallet:
        #            bcsBase = new BCSPalletBlockingBlock();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::UnBlockPallet:
        #            bcsBase = new BCSPalletBlockingUnblock();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::PalletTransportList:
        #            bcsBase = new BcsPalletTransportList();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::StartPalletTransport:
        #            bcsBase = new BcsPalletTransportStart();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::CompletePaleteTransport:
        #            bcsBase = new BcsPalletTransportComplete();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::InventPickPalletInfo:
        #            bcsBase = new BCSInventPickPalletInfo();
        #            break;
        #
        #        // <_0341_BCSWmsShipmentLoad> 18.7.2016 PS
        #        case InventBarcodeReaderInterfaceFunction::PalletLoadList:
        #            bcsBase = new BCSPalletLoadList();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::PalletLoad:
        #            bcsBase = new BCSPalletLoad();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::PalletUnload:
        #            bcsBase = new BCSPalletUnload();
        #            break;
        #        // </_0341_BCSWmsShipmentLoad>
        #
        #        // <_0350_BcsPalletInfoExt> 24.7.2016 PS
        #        case InventBarcodeReaderInterfaceFunction::PalletInfoLocation:
        #            bcsBase = new BCSPalletInfoLocation();
        #            break;
        #
        #        case InventBarcodeReaderInterfaceFunction::PalletInfoItem:
        #            bcsBase = new BCSPalletInfoItem();
        #            break;
        #        // </_0350_BcsPalletInfoExt>
        #
        #        default: throw error(Error::wrongUseOfFunction(funcName()));
        #    }
        #
        #    bcsBase.parmInputParam(_inputParam);
        #
        #    return bcsBase;
        #}
        #
      ENDSOURCE
      SOURCE #convertQty
        #static Qty convertQty(ItemId _itemId, Qty _qty, BCSUnitId _bcsUnitId)
        #{
        #    InventTable     inventTable;
        #    BCSUnitTable    bcsUnitTable;
        #    // <_0257_BCSInventCounting> 25.11.2015 RN
        #    UnitId          unitIdFrom;
        #    UnitId          unitIdTo;
        #    // </_0257_BCSInventCounting>
        #    InventQty       inventQty = _qty;
        #    ;
        #
        #    strFmt("Unit conversion");
        #
        #    if (_qty && _bcsUnitId)
        #    {
        #        bcsUnitTable    = bcsUnitTable::find(_bcsUnitId);
        #        if (!bcsUnitTable)
        #        {
        #            throw error(strFmt("@ADR447", _bcsUnitId));
        #        }
        #
        #        inventTable = inventTable::find(_itemId);
        #
        #        // <_0257_BCSInventCounting> 25.11.2015 RN
        #        unitIdFrom      = bcsUnitTable.UnitID;
        #
        #        if (!unitIdFrom)
        #        {
        #            throw error("Converting from unit ID must be specified.");
        #        }
        #
        #        if (!inventTable)
        #        {
        #            throw error("Item must be specified.");
        #        }
        #
        #        unitIdTo = inventTable.inventUnitId();
        #
        #        if (!unitIdTo)
        #        {
        #            throw error("Converting to unit ID must be specified.");
        #        }
        #
        #        if (!UnitConvert::canConvert(unitIdFrom, unitIdTo, _itemId))
        #        {
        #            throw error(strFmt("Conversion from unit %1 to unit %2 for item %3 is not specified.",
        #                               unitIdFrom,
        #                               unitIdTo,
        #                               _itemId));
        #        }
        #        // </_0257_BCSInventCounting>
        #
        #        inventQty = UnitConvert::qty(_qty, unitIdFrom, unitIdTo, _itemId);
        #    }
        #
        #    return inventQty;
        #}
      ENDSOURCE
      SOURCE #decodePalletId
        #// <_DRY_0078_BCSGS1Code128AIHandling> 26.5.2014 RN
        #// TODO: This method should normally be a non-static method,
        #// but since this is required in old framework from WBC this is implemented as static method.
        #static BarCodeString decodePalletId(BarCodeString _barCodeStr)
        #{
        #    BarCodeString   barCodeStr = _barCodeStr;
        #    BarcodeEAN128   barcode;
        #    int             pos;
        #    ;
        #
        #    if (barCodeStr)
        #    {
        #        // This is for the case pallet ID is expressed as EAN128 barcode.
        #        pos = strScan(barCodeStr, "]C1", 1, 3);
        #        if (pos)
        #        {
        #            if (barcode.validateBarcode(barCodeStr))
        #            {
        #                barcode.decode(barCodeStr);
        #                barCodeStr = barcode.palletId();
        #            }
        #        }
        #
        #        // Trim first two leading zeros ("00"), requsted for DCZ.
        #        // However causing issue in HTC, therefore apply only pallet Ids longer then 15 characters.
        #        if (strLen(barCodeStr) > 15)
        #        {
        #            pos = strScan(barCodeStr,"00",1,2);
        #            if (pos)
        #            {
        #                barCodeStr = strDel(barCodeStr,1,2);
        #            }
        #        }
        #    }
        #
        #    return barCodeStr;
        #}
      ENDSOURCE
      SOURCE #getFunction
        #private static InventBarcodeReaderInterfaceFunction getFunction(container _inputParam)
        #{
        #    // <_0080_HTC_BCSSimpleInvPicking> 16.6.2014 RN
        #    // <OLD>
        #    //return conpeek(_inputParam, 1);
        #    // </OLD>
        #    InventBarcodeReaderInterfaceFunction    funcId;
        #    Num                                     num;
        #    WmsPickingRoute                         wmsPickingRoute;
        #    ;
        #
        #    funcId  = conpeek(_inputParam, 1);
        #
        #    // There are 2 types of picking supported in AX.
        #    // However on scanner this is implemented in one function.
        #    // Here we determine which picking is going to be used.
        #    // If the number of the order is picking route then picking must be handled via picking route picking,
        #    // otherwise use simple inventory picking.
        #    if (funcId == InventBarcodeReaderInterfaceFunction::InventPick)
        #    {
        #        // TODO PS: if bcs2015 then the num is at position 6!
        #        // However we will need more likely 2 individual functions for simple picking and picking route picking ...
        #        num = conPeek(_inputParam, 4);
        #        wmsPickingRoute = WmsPickingRoute::find(num);
        #        if (wmsPickingRoute)
        #        {
        #            funcId = InventBarcodeReaderInterfaceFunction::PickingRoutePick;
        #        }
        #    }
        #
        #    return funcId;
        #    // </_0080_HTC_BCSSimpleInvPicking>
        #}
      ENDSOURCE
      SOURCE #testStrRemoveDiacritics
        #// <BCSRemoveDiacritics> 21.9.2016 PS
        #server static str testStrRemoveDiacritics(str _inputStr)
        #{
        #    return Global::strRemoveDiacritics(_inputStr);
        #}
      ENDSOURCE
      SOURCE #wmsWhLocSplit
        #// <_0182_DRY_BcsIssueMatForMRODefaultWh> 7.4.2015 RN: Updated in order to handle "/" in wms location ids.
        #// <_DRY_0042_WMSLocationLabel> 30.3.2014 RN
        #static container wmsWhLocSplit(str _wmsWhLocationId, InventLocationId _inventLocationId = "")
        #{
        #    //container           whLocCon;
        #    InventLocationId    inventLocationIdLocal;
        #    WmsLocationId       wmsLocationIdLocal;
        #    int                 pos;
        #    ;
        #
        #    inventLocationIdLocal   = _inventLocationId;
        #    wmsLocationIdLocal      = _wmsWhLocationId;
        #
        #    pos = strFind(_wmsWhLocationId, "/", 1, strLen(_wmsWhLocationId));
        #
        #    if (pos)
        #    {
        #        inventLocationIdLocal   = subStr(_wmsWhLocationId, 1, pos - 1);
        #        wmsLocationIdLocal      = subStr(_wmsWhLocationId, pos + 1, strLen(_wmsWhLocationId) - pos + 1);
        #
        #        if (_inventLocationId &&
        #            _inventLocationId != inventLocationIdLocal)
        #        {
        #            throw error(strFmt("@SYS53781", _wmsWhLocationId, _inventLocationId));
        #        }
        #    }
        #
        #    return [inventLocationIdLocal, wmsLocationIdLocal];
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : BRC_Solution unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #BRC_Solution
   PRIVATE
  PROPERTIES
    Name                #BRC_Solution
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCS_Test_SaveInfolog
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BcsBase64
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BcsClearPrintLog
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestBarcodeCode128
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestBlockPallet
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestInventCountCreateLine
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestInventCountJournal
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestInventPick
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestInventPickCrosscheck
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestInventPickPalletInfo
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestInventPickProd
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestInventPickSimple
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestInventRegister
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestInventUnpick
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestIssueMatDefaultMROWarehouse
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestIssueMaterialForMaintenance
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestLogin
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestLogin11
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPalletBlockingBlock
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPalletBlockingCodeList
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPalletInfo
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPalletInfoItem
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPalletInfoLocation
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BcsTestPalletItemDim
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPalletLoadList
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPalletLoadUnload
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPalletMove
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPalletTransportComplete
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPalletTransportList
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPalletTransportStart
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPickingRoutePick
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestPrintPallet
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestProdInventUnpick
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestProdRegisterPallet
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestRegisterPalletFromProduction
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #BCSTestRegisterPalletFromProduction2
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50254
      NODETYPE 329
      NAME #BCSPalletBlockingBlock
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50252
      NODETYPE 329
      NAME #BCSPalletBlockingCodeList
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50255
      NODETYPE 329
      NAME #BCSPalletBlockingUnblock
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50214
      NODETYPE 329
      NAME #BCSPalletInfo
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50366
      NODETYPE 329
      NAME #BCSPalletInfoItem
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50365
      NODETYPE 329
      NAME #BCSPalletInfoLocation
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50360
      NODETYPE 329
      NAME #BCSPalletLoad
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50363
      NODETYPE 329
      NAME #BCSPalletLoadList
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50056
      NODETYPE 329
      NAME #BCSPalletMove
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50292
      NODETYPE 329
      NAME #BCSPalletTransportComplete
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50256
      NODETYPE 329
      NAME #BCSPalletTransportList
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50291
      NODETYPE 329
      NAME #BCSPalletTransportStart
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50361
      NODETYPE 329
      NAME #BCSPalletUnload
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50094
      NODETYPE 329
      NAME #BCSPickingRoutePick
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50116
      NODETYPE 329
      NAME #BCSProdRegisterPallet
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50213
      NODETYPE 329
      NAME #BCSLogin
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50044
      NODETYPE 329
      NAME #BCSInventRegister
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50096
      NODETYPE 329
      NAME #BCSInventPickRefTransferOrder
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50048
      NODETYPE 329
      NAME #BCSIssueMaterialForMaintenance
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50098
      NODETYPE 329
      NAME #BCSInventPickRefSales
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50097
      NODETYPE 329
      NAME #BCSInventPickRefProd
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50093
      NODETYPE 329
      NAME #BCSInventPickRef
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50312
      NODETYPE 329
      NAME #BCSInventPickPalletInfo
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50043
      NODETYPE 329
      NAME #BCSInventPick
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50049
      NODETYPE 329
      NAME #BcsInventDim
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50029
      NODETYPE 329
      NAME #BCSInventCountingFindOrCreateJournal
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50047
      NODETYPE 329
      NAME #BCSInventCountingCreateLine
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50042
      NODETYPE 329
      NAME #BCSBase
    ENDNODE
  ENDPROJECT
  

***Element: END
